基本使用
一、Hello world
1.docker run ubuntu:15.10 /bin/echo "Hello world"
docker: Docker 的二进制执行文件。
run:与前面的 docker 组合来运行一个容器。
ubuntu:15.10指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。
/bin/echo "Hello world": 在启动的容器里执行的命令
以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo "Hello world"，然后输出结果。

2. 运行交互式的容器
docker run -i -t ubuntu:15.10 /bin/bash
-t:在新容器内指定一个伪终端或终端。
-i:允许你对容器内的标准输入 (STDIN) 进行交互。
此时我们已进入一个 ubuntu15.10系统的容器
我们尝试在容器中运行命令 cat /proc/version和ls分别查看当前系统的版本信息和当前目录下的文件列表
我们可以通过运行exit命令或者使用CTRL+D来退出容器。

3.启动容器（后台模式）
使用以下命令创建一个以进程方式运行的容器
runoob@runoob:~$ docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"
我们需要确认容器有在运行，可以通过 docker ps 来查看
CONTAINER ID:容器ID
NAMES:自动分配的容器名称
在容器内使用docker logs命令，查看容器内的标准输出
docker logs 2b1b7a428627

4.停止容器
我们使用 docker stop 命令来停止容器:

二、容器使用
1.客户端
我们可以直接输入 docker 命令来查看到 Docker 客户端的所有命令选项。
可以通过命令 docker command --help 更深入的了解指定的 Docker 命令使用方法。

2.运行一个web应用
docker pull training/webapp  # 载入镜像
docker run -d -P training/webapp python app.py
-d:让容器在后台运行。
-P:将容器内部使用的网络端口映射到我们使用的主机上。

3.查看 WEB 应用容器
docker ps
docker run -d -p 5000:5000 training/webapp python app.py
容器内部的 5000 端口映射到我们本地主机的 5000 端口上。

4.网络端口的快捷方式
通过docker ps 命令可以查看到容器的端口映射，docker还提供了另一个快捷方式：docker port,
使用 docker port 可以查看指定 （ID或者名字）容器的某个确定端口映射到宿主机的端口号。
docker port 7a38a1ad55c6
docker port determined_swanson

5.查看WEB应用程序日志
docker logs [ID或者名字] 可以查看容器内部的标准输出。
-f:让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。

6.查看WEB应用程序容器的进程
我们还可以使用 docker top 来查看容器内部运行的进程
docker top determined_swanson

7.检查WEB应用程序
使用 docker inspect 来查看Docker的底层信息。它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。
docker inspect determined_swanson

8.重启WEB应用容器
已经停止的容器，我们可以使用命令 docker start 来启动。
docker start determined_swanson

9.移除WEB应用容器
我们可以使用 docker rm 命令来删除不需要的容器
docker rm determined_swanson  

三、Docker 镜像使用
1.列出镜像列表
我们可以使用 docker images 来列出本地主机上的镜像。

2.获取一个新的镜像
我们可以使用 docker pull 命令来下载它。
docker pull ubuntu:13.10

3.查找镜像
我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： https://hub.docker.com/
我们也可以使用 docker search 命令来搜索镜像。
比如我们需要一个httpd的镜像来作为我们的web服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。
docker search httpd
拖取镜像
我们决定使用上图中的httpd 官方版本的镜像，使用命令 docker pull 来下载镜像。
下载完成后，我们就可以使用这个镜像了。
docker run httpd

4.创建镜像
当我们从docker镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。
（1）从已经创建的容器中更新镜像，并且提交这个镜像
更新镜像之前，我们需要使用镜像来创建一个容器。
run -t -i ubuntu:15.10 /bin/bash
在运行的容器内使用 apt-get update 命令进行更新。
在完成操作之后，输入 exit命令来退出这个容器。
此时ID为e218edb10161的容器，是按我们的需求更改的容器。我们可以通过命令 docker commit来提交容器副本。
docker commit -m="has update" -a="runoob" e218edb10161 runoob/ubuntu:v2

（2）使用 Dockerfile 指令来创建一个新的镜像
我们使用命令 docker build ， 从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。
'''
FROM    centos:6.7
MAINTAINER      Fisher "fisher@sudops.com"
RUN     /bin/echo 'root:123456' |chpasswd
RUN     useradd runoob
RUN     /bin/echo 'runoob:123456' |chpasswd
RUN     /bin/echo -e "LANG=\"en_US.UTF-8\"" >/etc/default/local
EXPOSE  22
EXPOSE  80
CMD     /usr/sbin/sshd -D
'''
docker build -t runoob/centos:6.7 .
-t ：指定要创建的目标镜像名
. ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径

5.设置镜像标签
我们可以使用 docker tag 命令，为镜像添加一个新的标签。
docker tag 860c279d2fec runoob/centos:dev

四、Docker 容器连接
1.网络端口映射
我们创建了一个 python 应用的容器。
docker run -d -P(大写) training/webapp python app.py
我们使用 -P 参数创建一个容器，使用 docker ps 来看到端口5000绑定主机端口32768。
我们也可以使用 -p 标识来指定容器端口绑定到主机端口。
两种方式的区别是:
-P(大写) :是容器内部端口随机映射到主机的高端口。
-p : 是容器内部端口绑定到指定的主机端口。
 docker run -d -p 5000:5000 training/webapp python app.py
 另外，我们可以指定容器绑定的网络地址，比如绑定127.0.0.1。
 docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py
 这样我们就可以通过访问127.0.0.1:5001来访问容器的5000端口。
 默认都是绑定 tcp 端口，如果要绑定 UDP 端口，可以在端口后面加上 /udp。
 docker port 命令可以让我们快捷地查看端口的绑定情况。
 
2.Docker容器连接
端口映射并不是唯一把 docker 连接到另一个容器的方法。
docker有一个连接系统允许将多个容器连接在一起，共享连接信息。
docker连接会创建一个父子关系，其中父容器可以看到子容器的信息。
容器命名
当我们创建一个容器的时候，docker会自动对它进行命名。另外，我们也可以使用--name标识来命名容器，例如：
docker run -d -P --name runoob training/webapp python app.py