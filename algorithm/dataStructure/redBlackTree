红黑树
一、红黑树性质
1.红黑树是一棵二叉搜索树。它在每个结点上增加了一个存储位来表示结点的颜色，可以是RED或BLACK。通过对任何一条从根到叶子的简单路径上各个结点的颜色进行约束，红黑树确保没有一条路径会比其他路径长出2倍，因而是近乎于平衡的。
2.一棵红黑树是满足下面红黑性质的二叉搜索树
（1)每个结点或是红色，或是黑色的
（2)根结点是黑色的
（3)每个叶节点是黑色的。（为了便于处理边界条件，用黑色哨兵T.nil代替NIL）
（4)如果一个结点是红色的，则它的两个子结点都是黑色的
（5)对每个结点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色结点。
3.从某个结点x出发（不含该结点）到达一个叶节点的任意一条简单路径上的黑色结点个数称为该结点的黑高，记为bh(x)。一棵有n个内部结点的红黑树的高度至多为2lg(n+1)

二、旋转
1.目的：
	插入或删除后，维护红黑树的红黑性质
2.左旋、右旋
	假设结点x左孩子a,右孩子y，y左孩子b，右孩子c，对x左旋，则y变成x的位置，y左孩子x，右孩子c，x左孩子a,右孩子b
	右旋是左旋逆过程
	假设x.right!=T.nil且根结点的父结点为T.nil
	LEFT-ROTATE（T，x)
	y=x.right
	x.right = y.left
	if y.left != T.nil
		y.left.p = x
	y.p = x.p
	if x.p == T.nil
		T.root = y
	elseif x==x.p.left
		x.p.left = y
	else 
		x.p.right = y
	y.left = x
	x.p = y	

三、插入
1.步骤
第一步: 将红黑树当作一颗二叉查找树，将节点插入。
	红黑树本身就是一颗二叉查找树，将节点插入后，该树仍然是一颗二叉查找树。也就意味着，树的键值仍然是有序的。此外，无论是左旋还是右旋，若旋转之前这棵树是二叉查找树，旋转之后它一定还是二叉查找树。这也就意味着，任何的旋转和重新着色操作，都不会改变它仍然是一颗二叉查找树的事实。
第二步：将插入的节点着色为"红色"。
	将插入的节点着色为红色，不会违背"特性(5)"！少违背一条特性，就意味着我们需要处理的情况越少。
第三步: 通过一系列的旋转或着色等操作，使之重新成为一颗红黑树。
2.算法
	RB-INSERT(T,z)
	y=T.nil					// 新建节点“y”，将y设为空节点。
	x=T.root				// 设“红黑树T”的根节点为“x”
	while x!=T.nil			// 找出要插入的节点“z”在二叉树T中的位置“y”
		y=x
		if z.key<x.key
			x=x.left
		else
			x=x.right
	z.p = y					// 设置 “z的父亲” 为 “y”
	if y == T.nil			// 情况1：若y是空节点，则将z设为根
		T.root = z
	elseif z.key<y.key		// 情况2：若“z所包含的值” < “y所包含的值”，则将z设为“y的左孩子”
		y.left = z
	else					// 情况3：(“z所包含的值” >= “y所包含的值”)将z设为“y的右孩子” 
		y.right = z
	z.left = T.nil			// z的左孩子设为空
	z.right = T.nil			// z的右孩子设为空。至此，已经完成将“节点z插入到二叉树”中了。
	z.color = RED			// 将z着色为“红色”
	RB-INSERT-FIXUP(T,z)	//对结点重新着色并旋转

	RB-INSERT-FIXUP(T,z)
	while z.p!=NIL && z.p.p!=NIL && z.p.color == RED			// 若“当前节点(z)的父节点是红色”，则进行以下处理。
		if z.p == z.p.p.left	 	// 若“z的父节点”是“z的祖父节点的左孩子”，则进行以下处理。
			y = z.p.p.right			// 将y设置为“z的叔叔节点(z的祖父节点的右孩子)”
			if y.color ==RED		// Case 1条件：叔叔是红色
				z.p.color = BLACK		▹ Case 1   //  (01) 将“父节点”设为黑色。
				y.color = BLACK			▹ Case 1   //  (02) 将“叔叔节点”设为黑色。
				z.p.p.color = RED		▹ Case 1   //  (03) 将“祖父节点”设为“红色”。
				z = z.p.p				▹ Case 1   //  (04) 将“祖父节点”设为“当前节点”(红色节点)
			else if z == z.p.right	// Case 2条件：叔叔是黑色，且当前节点是右孩子
				z = z.p					▹ Case 2   //  (01) 将“父节点”作为“新的当前节点”。
				LEFT-ROTATE(T,z)		▹ Case 2   //  (02) 以“新的当前节点”为支点进行左旋。
			else					// Case 3条件：叔叔是黑色，且当前节点是左孩子。
				z.p.color = BLACK		▹ Case 3	   //  (01) 将“父节点”设为“黑色”。	
				z.p.p.color = RED		▹ Case 3   //  (02) 将“祖父节点”设为“红色”。
				RIGHT-ROTATE(T,z.p.p)	▹ Case 3   //  (03) 以“祖父节点”为支点进行右旋。
		else						// 若“z的父节点”是“z的祖父节点的右孩子”，将上面的操作中“right”和“left”交换位置，然后依次执行。
			(same as if with "right" and "left" exchanged)
	T.root.color = BLACK
					
四、删除
1.步骤
第一步：将红黑树当作一颗二叉查找树，将节点删除。
第二步：通过"旋转和重新着色"等一系列来修正该树，使之重新成为一棵红黑树。
2.算法
	-RB-TRANSPLANT(T,u,v)
	if u.p == T.nil
		T.root = v
	elseif u == u.p.left
		u.p.left = v
	else
		u.p.right = v
	v.p = u.p

	-RB-DELETE(T,z)
	y = z
	y-original-color = y.color
	if z.left == T.nil				//z左孩子为空	
		x = z.right						
		RB-TRANSPLANT(T,z,z.right)
	elseif z.right == T.nil			//z右孩子为空
		x = z.left
		RB-TRANSPLANT(T,z,z.left)
	else							//z有两个孩子
		y = TREE-MINIMUM(z.right)	//z的后继
		y-original-color = y.color	//更新y原始颜色
		x = y.right
		if y.p == z
			x.p = y
		else
			RB-TRANSPLANT(T,y,y.right)
			y.right = z.right
			y.right.p = y
		RB-TRANSPLANT(T,z,y)
		y.left = z.left
		y.left.p = y
		y.color = z.color
	if y-original-color == BLACK	//如果y原始颜色为黑，则维护红黑树
		RB-DELETE-FIXUP(T,x)

	-RB-DELETE-FIXUP（T,x)
	while x!=T.root and x.color == BLACK
		if x == x.p.left
			w = x.p.right					// 若 “x”是“它父节点的左孩子”，则设置 “w”为“x的兄弟
			if w.color == RED				// Case 1: w节点是红色。
				w.color = BLACK				▹  Case 1   //   (01) 将x的兄弟节点设为“黑色”。
				x.p.color = RED				▹  Case 1   //   (02) 将x的父节点设为“红色”。
				LEFT-ROTATE(T,x.p)			▹  Case 1   //   (03) 对x的父节点进行左旋。
				w = x.p.right				▹  Case 1   //   (04) 左旋后，重新设置x的兄弟节点。
			if w.left.color == BLACK and w.right.color == BLACK		// Case 2: w节点是黑色，w节点的两个孩子都是黑色。
				w.color = RED				▹  Case 2   //   (01) 将x的兄弟节点设为“红色”。
				x = x.p						▹  Case 2   //   (02) 设置“x的父节点”为“新的x节点”。
			else if w.right.color == BLACK	// Case 3: w节点是黑色；w节点的左孩子是红色，右孩子是黑色的。
				w.left.color = BLACK		▹  Case 3   //   (01) 将x兄弟节点的左孩子设为“黑色”。
				w.color = RED			 	▹  Case 3   //   (02) 将x兄弟节点设为“红色”。
				RIGHT-ROTATE(T,w)			▹  Case 3   //   (03) 对x的兄弟节点进行右旋。
				w = x.p.right
			else							// Case 4: w节点是黑色；w节点的右孩子是红色的。
				w.color = x.p.color			▹  Case 4 	//(01) 将x父节点颜色 赋值给 x的兄弟节点。
				x.p.color = BLACK			▹  Case 4   //   (02) 将x父节点设为“黑色”。
				w.right.color = BLACK		▹  Case 4   //   (03) 将x兄弟节点的右子节设为“黑色”。
				LEFT-ROTATE(T,x.p)			▹  Case 4   //   (04) 对x的父节点进行左旋。
				x = T.root					▹  Case 4   //   (05) 设置“x”为“根节点”。
		else
			(same as if with "right" and "left" exchanged)
	x.color = BLACK

五、操作时间
	O（lgn）
六、参考
	http://www.cnblogs.com/skywang12345/p/3245399.html
