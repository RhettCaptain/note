最短路径
一、单源最短路径
核心思路：从任意节点A到任意节点B的最短路径不外乎2种可能，1是直接从A到B，2是从A经过若干个节点到B。
1.Dijkstra算法
特点：
单源无负权最短路径，可得起点到任意点的最短路径
时间复杂度：O(v^3)
空间复杂度: O(v)
---
思想：
把V分成两组：
S：已求出最短路径的顶点的集合
V-S=T：尚未确定最短路径的顶点集合
将T中顶点按最短路径递增的次序加入到S中，
依据：可以证明V0到T中顶点Vk的最短路径，或是从V0到Vk的直接路径的权值或是从V0经S中顶点到Vk的路径权值之和
----
步骤：
（1）初使时令 S={V0},T={其余顶点}，T中顶点对应的距离值， 若存在<V0,Vi>，为<V0,Vi>弧上的权值（和ＳＰＦＡ初始化方式不同），若不存在<V0,Vi>，为Inf。
（2）从T中选取一个其距离值为最小的顶点W(贪心体现在此处)，加入S(注意不是直接从S集合中选取，理解这个对于理解vis数组的作用至关重要)，
对T中顶点的距离值进行修改：若加进W作中间顶点，从V0到Vi的距离值比不加W的路径要短，则修改此距离值（上面两个并列for循环，使用最小点更新）。
（3）重复上述步骤，直到S中包含所有顶点，即S=V为止（说明最外层是除起点外的遍历）。
---
代码：


2.Floyd算法
特点：
可以算出任意两个节点之间的最短距离
时间复杂度：O(v^3)
空间复杂度：O(v^2)
---
思想：
我们假设dist(AB)为节点A到节点B的最短路径的距离，对于每一个节点K，我们检查dist(AK) + dist(KB) < dist(AB)是否成立，
如果成立，证明从A到K再到B的路径比A直接到B的路径短，我们便设置 dist(AB) = dist(AK) + dist(KB)，这样一来，当我们遍历完所有节点K，
dist(AB)中记录的便是A到B的最短路径的距离
但是这里我们要注意循环的嵌套顺序，如果把检查所有节点K放在最内层，那么结果将是不正确的，为什么呢？因为这样便过早的把i到j的最短路径确定下来了，而当后面存在更短的路径时，已经不再会更新了。
---
代码
	void floyd() {
      for(int i=1; i<=n ; i++){
        for(int j=1; j<= n; j++){
          if(map[i][j]==Inf){
               path[i][j] = -1;//表示  i -> j 不通 
          }else{
               path[i][j] = i;// 表示 i -> j 前驱为 i
          }
        }
      }
      for(int k=1; k<=n; k++) {
        for(int i=1; i<=n; i++) {
          for(int j=1; j<=n; j++) {
            if(!(dist[i][k]==Inf||dist[k][j]==Inf)&&dist[i][j] > dist[i][k] + dist[k][j]) {
              dist[i][j] = dist[i][k] + dist[k][j];
              //path[i][k] = i;//删掉
              path[i][j] = path[k][j];
            }
          }
        }
      }
    }
    void printPath(int from, int to) {
        /*
         * 这是倒序输出，若想正序可放入栈中，然后输出。
         * 这样的输出为什么正确呢？个人认为用到了最优子结构性质，
         * 即最短路径的子路径仍然是最短路径
         */
        while(path[from][to]!=from) {
            System.out.print(path[from][to] +"");
            to = path[from][to];
        }
    }
    
3.Bellman-Ford算法
特点：
求单源最短路径，可得起点到任意点的最短路径，可判断有无负权回路
时间复杂度: O(ve)
---
思想：
Dijkstra算法和Bellman算法思想有很大的区别：Dijkstra算法在求解过程中，源点到集合S内各顶点的最短路径一旦求出，则之后不变了，
修改的仅仅是源点到T集合中各顶点的最短路径长度。
Bellman算法在求解过程中，每次循环都要修改所有顶点的dist[ ]，也就是说源点到各顶点最短路径长度一直要到Bellman算法结束才确定下来。
步骤：
（1）初始化dist(i),除了初始点的值为0，其余都为infinit（表示无穷大，不可到达）,pred表示经过的前一个顶点
（2）执行n-1（n等于图中点的个数）次松弛计算：dist(j)=min( dist(i)+weight(i,j),dist(j) )
（3）再重复操作一次，如国dist(j) > distdist(i)+weight(i,j)表示途中存在从源点可达的权为负的回路。
因为，如果存在从源点可达的权为负的回路，则应为无法收敛而导致不能求出最短路径。 
代码：
int[] dist=new int[n];  
int[] pre=new int[n];  
public void Bellman_Ford(){  
  //初始化  
  for(int i=1;i<n-1;i++){  
     dist[i]=infinit; //TODO  
  }//end for  
  dist[s]=0 //起始点的值    
  for (int i=1;i<=n;i++){  
    for(int j=1;j<=n; j++){  	//实际遍历边就可以了，如果inf也看做边，则本质还是遍历点
      if(dist(i)+weight(i,j) <dist(j) ){  
         dist(j)=dist(i)+weight(i,j);  
         pred(j)=i;  
      }//end if  
    }//end for  
  }//end for  
    
  //  
  for(int j=1;j<=edgenum;j++){  
     if(dist(i)+weight(i,j)<dist()j )  
        return "有负权回路，不存在最短路径";  
  }//end for  
}//end Bellman_Ford()  

4.SPFA

5.A*
特点：
---
思想：
一旦我们把搜寻区域简化为一组可以量化的节点后，就像上面做的一样，我们下一步要做的便是查找最短路径。
在 A* 中，我们从起点开始，检查其相邻的方格，然后向四周扩展，直至找到目标。
---
步骤：
(1)把起点加入 open list 。
(2)重复如下过程：
F=G+H
G = 从起点 A 移动到指定方格的移动代价，沿着到达该方格而生成的路径。
H = 从指定的方格移动到终点 B 的估算成本。
既然我们是沿着到达指定方格的路径来计算 G 值，那么计算出该方格的 G 值的方法就是找出其父亲的 G 值，然后按父亲是直线方向还是斜线方向加上 10 或 14 。
有很多方法可以估算 H 值。如Manhattan 方法，欧式距离法等
a. 遍历 open list ，查找 F 值最小的节点，把它作为当前要处理的节点。
b. 把这个节点移到 close list 。
c. 对当前方格的 8 个相邻方格的每一个方格？
     如果它是不可抵达的或者它在 close list 中，忽略它。否则，做如下操作。
     如果它不在 open list 中，把它加入 open list ，并且把当前方格设置为它的父亲，记录该方格的 F ， G 和 H 值。
     如果它已经在 open list 中，检查这条路径 ( 即经由当前方格到达它那里 ) 是否更好，用 G 值作参考。更小的 G 值表示这是更好的路径。如果是这样，把它的父亲设置为当前方格，并重新计算它的 G 和 F 值。如果你的 open list 是按 F 值排序的话，改变后你可能需要重新排序。
d. 停止，当你
     把终点加入到了 open list 中，此时路径已经找到了，或者
    查找终点失败，并且 open list 是空的，此时没有路径。
(3)保存路径。从终点开始，每个方格沿着父节点移动直至起点，这就是你的路径。
