1.图标菜单
使用Tool Strip实现
通过调节属性中的imageScalingSize和自身Size实现大小调节

2.最大最小化
    this.FormBorderStyle = FormBorderStyle.None;
    this.WindowState = FormWindowState.Maximized;
    this.WindowState = FormWindowState.Minimized;
    
3.多窗口切换
    添加用户控件，如Win1,Win2两个
    在某一个容器如winBox中切换这两个控件，
     win1.Show();
     winBox.Controls.Clear();
     winBox.Controls.Add(win1);
     如果要让Win1，Win2随父窗口伸缩，可设置DOCK如win1.Dock = DockStyle.Fill;
     
4.圆形/圆角按钮
using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using System.Drawing.Drawing2D;

namespace WinformLx.Class
{
    enum buttonStyle
    { 
        ButtonNormal,
        ButtonFocuse,
        ButtonMouseOver,
        ButtonFocuseAndMouseOver
    }
    class Util_GDI
    {
        /// 绘制圆形按钮（用法同矩形按钮）
        public static void DrawCircleButton(string text, Graphics g, Point Location, int r, buttonStyle btnStyle)
        {
            Graphics Gcircle = g;
            Rectangle rect = new Rectangle(Location.X, Location.Y, r, r);
            Pen p = new Pen(new SolidBrush(Color.Black));
            Gcircle.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
      			//外圈
            Gcircle.DrawEllipse(p, rect);
            if (btnStyle == buttonStyle.ButtonFocuse)
            {
                Gcircle.FillEllipse(new SolidBrush(ColorTranslator.FromHtml("#338FCC")), rect);
            }
            else if (btnStyle == buttonStyle.ButtonMouseOver)
            {
                Gcircle.FillEllipse(new SolidBrush(ColorTranslator.FromHtml("#EAC100")), rect);
            }
            else if (btnStyle == buttonStyle.ButtonFocuseAndMouseOver)
            {
                Gcircle.FillEllipse(new SolidBrush(ColorTranslator.FromHtml("#EAC100")), rect);
            }
            //内圈
            p.DashStyle = DashStyle.Dash;
            if (btnStyle != buttonStyle.ButtonNormal)
            {
                
                Gcircle.DrawEllipse(p, new Rectangle(rect.X + 2, rect.Y + 2, rect.Width - 4, rect.Height - 4));//虚线框
            }
            //此处填充，如果要考虑按下等状态变化，请判断buttonState状态修改颜色等。
            Gcircle.FillEllipse(new SolidBrush(Color.WhiteSmoke), new Rectangle(rect.X + 3, rect.Y + 3, rect.Width - 6, rect.Height - 6));
            StringFormat sf = new StringFormat();
            sf.Alignment = StringAlignment.Center;
            sf.LineAlignment = StringAlignment.Center;
            Gcircle.DrawString(text, new Font(new FontFamily("宋体"), 10), new SolidBrush(Color.Black), rect, sf);
            p.Dispose();
        }
    }
}
新建一个cs命名为MyButton，继承Button类，重写Button类的Paint方法：

using System;
using System.Windows;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

using WinformLx.Class; //引用之前工具类的命名空间

namespace WinformLx.UserControls
{
    public class MyButton : System.Windows.Forms.Button
    {
        private bool mouseover = false;//鼠标经过
        public MyButton()
        {
            this.Cursor = System.Windows.Forms.Cursors.Hand;
        }

        protected override void OnPaint(PaintEventArgs e)
        {

            //在这里用自己的方法来绘制Button的外观(其实也就是几个框框)
            Graphics g = e.Graphics; 
            g.Clear(this.BackColor);
            Rectangle rect = e.ClipRectangle;
            rect = new Rectangle(rect.X,rect.Y,rect.Width-1,rect.Height-2);
            Point center = new Point(rect.X,rect.Y);
            int radius = rect.Width;
            //g.ReleaseHdc();
            if (mouseover)
            {
                if (Focused)
                {
                    Util_GDI.DrawCircleButton(this.Text, g, center, radius, buttonStyle.ButtonFocuseAndMouseOver);
                    return;
                }
                Util_GDI.DrawCircleButton(this.Text, g, center, radius, buttonStyle.ButtonMouseOver);
                return;
            }
            if (Focused)
            {
                Util_GDI.DrawCircleButton(this.Text, g, center, radius, buttonStyle.ButtonFocuse);
                return;
            }
            Util_GDI.DrawCircleButton(this.Text, g, center, radius, buttonStyle.ButtonNormal);
        }

        protected override void OnMouseEnter(EventArgs e)
        {
            mouseover = true;
            base.OnMouseEnter(e);
        }
        protected override void OnMouseLeave(EventArgs e)
        {
            mouseover = false;
            base.OnMouseLeave(e);   
        }
    }
}

5.DataGridView数据表格
（1）列宽模式
布局 - AutoSizeColumnsMode属性
（2）数据源
--DataTable
	//创建一个空表
	DataTable dt = new DataTable();
	//创建空列
	DataColumn dc = new DataColumn();
	dt.Columns.Add(dc);
	//创建空行
	DataRow dr = dt.NewRow();
	dt.Rows.Add(dr);
	//新建行的赋值
	DataRow dr = dt.NewRow();
	dr[0] = "张三";//通过索引赋值
	dr["column1"] = DateTime.Now; //通过名称赋值
	//对表已有行进行赋值
	dt.Rows[0][0] = "张三"; //通过索引赋值
	dt.Rows[0]["column1"] = DateTime.Now;//通过名称赋值
	//取值
	string name=dt.Rows[0][0].ToString();
	string time=dt.Rows[0]["column1"].ToString();
	//选择column1列值为空的行的集合
	DataRow[] drs = dt.Select("column1 is null");
	//选择column0列值为"李四"的行的集合
	DataRow[] drs = dt.Select("column0 = '李四'");
	//筛选column0列值中有"张"的行的集合(模糊查询)
	DataRow[] drs = dt.Select("column0 like '张%'");//如果的多条件筛选，可以加 and 或 or
	//筛选column0列值中有"张"的行的集合并按column1降序排序
	DataRow[] drs = dt.Select("column0 like '张%'", "column1 DESC");
	//使用DataTable.Rows.Remove(DataRow)方法
	dt.Rows.Remove(dt.Rows[0]);
	//使用DataTable.Rows.RemoveAt(index)方法
	dt.Rows.RemoveAt(0);
	//使用DataRow.Delete()方法
	dt.Row[0].Delete();
	dt.AcceptChanges();
	//绑定
	dgv.DataSource = dt;
（3）参考文献
http://www.cnblogs.com/Sandon/p/5175829.html
http://blog.csdn.net/ffwangxiuwei/article/details/5935116

6.GDI+ 绘图
（1）首先准备一个画板:
创建一个画板主要有3种方式:
A: 在窗体或控件的Paint事件中直接引用Graphics对象 
		private void Form1_Paint(object sender, PaintEventArgs e)
    {
        Graphics g = e.Graphics; //创建画板,这里的画板是由Form提供的.
    }
B: 利用窗体或某个控件的CreateGraphics方法
C: 从继承自图像的任何对象创建Graphics对象
		Bitmap mapBmp = new Bitmap(10,10);
		picBox.Image = mapBmp;	//	picture box 绑定图片，然后绘制显示。注意：重new后就不是绑定的那块内存了
		Graphics g = Graphics.FromImage(mapBmp);
（2）刷子（brush）和笔（pen）
		SolidBrush robotBrush = new SolidBrush(Color.Gray);
    Pen robotPen = new Pen(new SolidBrush(Color.Red), 5);
（3）画（draw）与填充（fill）
		g.DrawLine(coorPen, new Point(0, maxY - 0), new Point(width, maxY - 0));
		g.FillPolygon(blockBrush, (PointF[])obsPoints.ToArray(typeof(PointF)));
（4）其他
--如何在一个背景图上每次绘制新的东西：
		背景图backBmp，picBox绑定showBmp，
		每次showBmp先重绘背景，如全白。
		然后把backBmp画在showBmp上，然后画新的即可。