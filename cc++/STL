标准模板库
1. 含义
    STL提供了一组表示容器、迭代器、函数对象和算法的模板。
    容器是一个与数组类似的单元，可以存储若干个值。STL容器是同质的，即存储的值类型相同。
    算法是完成特定任务，如对数组进行排序或在链表查找特定值等。
    迭代器是能够用来遍历容器的对象，是广义指针。
    函数对象是类似于函数的对象，可以是类对象或函数指针。
    STL不是面向对象编程，而是泛型编程。

2.容器
（1）基本
    容器概念是具有名称（容器、序列容器、关联容器等）的通用类别。
    容器类型是可用于创建具体容器对象的模板：包括
    deque\list\queue\priority_queue\stack\vector\map\multimap\set\multiset\bitset
    (c++11新增）forward_list\unordered_map\unordered_multimap\unordered_set\unordered_multiset
    ---
    所有的STL容器都提供了一些基本方法，包括：
    size()  //返回容器中元素数目。
    swap()  //交换两个容器的内容
    begin() //返回一个指向容器中第一个元素的迭代器
    end()   //返回一个超过容器尾的迭代器,即指向容器最后一个元素后面的那个元素，与'\0'功能类似。

(2)序列（sequence）
    通过添加要求来改进基本的容器概念
    序列容器类型包括:
    forward_list\list\queue\priority_queue\stack\vector
    序列的要求：
    表达式		返回类型		说明
    X a(n,t)					声明一个名为a的由n个t值组成的序列
    X(n,t)					创建一个由n个t值组成的匿名序列
    X a(i,j)					?声明一个名为a的序列，并将其初始化为区间[i,j)的内容
    X(i,j)					?创建一个匿名序列，并将其初始化为区间[i,j)的内容
    a.insert(p,t)	迭代器			将t插入到p的前面
    a.insert(p,n,t)	void			将n个t插入到p的前面
    a.insert(p,i,j)	void 			?将区间[i,j)中的元素插入到p的前面
    a.erase(p)		迭代器			删除p指向的元素
    a.erase(p,q)	迭代器			删除[p,q)中的元素
    a.clear()		void			等价于erase(begin(),end());
    ---还有一些可选要求---
    表达式		返回类型	含义			容器
    a.front()		T&		*a.begin()		vector,list,deque
    a.back()		T&		*--a.end()		vector,list,deque
    a.push_front(t)	void 		a.insert(a.begin(),t)	list,deque
    a.push_back(t)	void		a.insert(a.end(),t)	vector,list,deque
    a.pop_front(t)	void 		a.erase(a.begin())	list,deque
    a.pop_back(t)	void 		a.erase(--a.end())	vector,list,deque
    a[n]		T&		*(a.begin()+n)		vector,deque
    a.at(t)		T&		*(a.begin()+n)		vector,deque

(3)vector
    参见array

(4)deque
    头文件：<deque>
    含义：双端队列

(5)list
    头文件：<list>
    含义：双向链表
    成员函数：
	void merge(list<T,Alloc>&x)	//将链表x与调用链表合并。两个链表必须已经排序。合并后保存在调用链表中，x为空。
	void remove(const T& val)	//从链表中删除val的所有实例
	void sort()			//使用<运算符排序，复杂度NlogN
	void splice(iterator pos,list<T,Alloc>x)	//将链表x的内容插入到pos前面，x将位空。
	void unique()			//将连续的相同元素压缩为单个元素。

(6)forward_list
    含义：单向链表

(7)queue
    头文件：<queue>
    含义：一个适配器类，让底层类（deque）展示典型的队列接口
    成员函数：
    	bool empty()const		//如果队列为空，则返回true，否则false
	size_type size()const		//返回队列中元素的数目
	T& front()			//返回指向队首元素的引用
	T& back()			//返回指向队尾元素的引用
	void push(const T& x)		//在队尾插入x
	void pop()			//删除队首元素

(8)priority_queue
    头文件：<queue>
    含义：一个适配器类，最大元素被移到队首，默认的底层类是vector。

(9)stack
    头文件：<stack>
    含义：一个适配器类，给底层类（vector)提供典型的栈接口。 
    成员函数：
	bool empty()const		//如果栈为空，则返回true，否则false
	size_type size()const		//返回栈中元素的数目
	T& top()			//返回指向栈顶元素的引用
	void push(const T& x)		//在栈顶插入x
	void pop()			//删除栈顶元素

(10)关联容器
	关联容器将值与建关联在一起,并使用键来查找值.
	STL提供4种关联容器:set,multiset,map,multimap

(11)set与multiset
    set可反转,经排序(默认按升序排),键唯一,键-值类型相同,不能存储多个相同的值.
    差别在与set中不允许有重复元素，multiset中允许有重复元素
    sets和multiset内部以平衡二叉树(红黑树)实现
--头文件
    <set>

--声明/初始化--
    set<string> A;    //指明值的类型
    string s1[4] = {"asm","fda","dfw","ew"};
    set<string> B(s1,s1+4);	//用迭代器构造初始化
    
--方法--
    --set_union(第一集合区间头,第一个集合区间尾,第二集合区间头,第二集合区间尾,输出迭代器);
将两个区间并集输出到目标位置.如:
        set_union(A.begin(),A.end(),B.begin(),B.end(),ostream_iterator<string,char> out(cout," "));//输出到 
        set_union(A.begin(),A.end(),B.begin(),B.end(),insert_iterator<set<string> >(C,C.begin()));
    --set_intersection()
        查找交集,接口和set_union()相同
    --set_difference()
        查找两个交集的差,接口和set_union()相同
    --lower_bound(key_value)
	将键作为参数,并返回一个迭代器,该迭代器指向集合中第一个不小于键参数的成员
    --upper_bound(key_value)
	将键作为参数,并返回一个迭代器,该迭代器指向集合中第一个(没有不)大于键参数的成员.如:	
	set<string> A;
	ostream_iterator<string, char> out(cout," ");
	copy(A.lower_bound("ghost"),A.upper_bound("spook"),out);
    --insert(key_value); 
	将key_value插入到set中 ，返回值是pair<set<int>::iterator,bool>，bool标志着插入是否成功，而iterator代表插入的位置，若key_value已经在set中，则iterator表示的key_value在set中的位置。
    --inset(first,second);
	将定位器first到second之间的元素插入到set中，返回值是void.如:
	set<int> mySet;
        int arr[4] = {5,2,3,4};
        mySet.insert(1);
        mySet.insert(arr,arr+4);
        set<int>::iterator iter;
        for(iter = mySet.begin();iter != mySet.end(); ++iter)
        {       cout << *iter << " "; }	// 输出1 2 3 4 5
    --find()  
	返回给定值值得定位器，如果没找到则返回end()。如:
	set<int>::iterator iter = mySet.find(2);
    --erase(iterator)  ,删除定位器iterator指向的值
      erase(first,second),删除定位器first和second之间的值
      erase(key_value),删除键值key_value的值
    --~set()
	销毁所有元素，释放内存
    --其他
	begin()     　　 ,返回set容器的第一个元素
	end() 　　　　 ,返回set容器的最后一个元素
	clear()   　　     ,删除set容器中的所有的元素
	empty() 　　　,判断set容器是否为空
	max_size() 　 ,返回set容器可能包含的元素最大个数
	size() 　　　　 ,返回当前set容器中的元素个数
	rbegin　　　　 ,返回的值和end()相同
	rend()　　　　 ,返回的值和rbegin()相同
--参考文献:
	http://blog.csdn.net/sunshinewave/article/details/8068326

(12)map/multimap
	multimap可反转,经排序,键-值类型不同,且同一个键可能与多个值相关联.
	数据结构同样是采用红黑树进行管理
--头文件
    <map>

--声明/初始化
    map<int, string> mapStudent;

--方法
    --pair<iterator,bool>insert(const value_type& v)
	将元素v（包括键值和映照数据）插入map容器，重复的v值不被插入。返回一个pair配对对象，提供所插入元素的迭代器位置和true/false插入成功标志。
    --iteratorinsert(iterator position, const value type& v)
	将元素v（包括键值和映照数据）插入map容器，参数position只是提示可在position位置之前插入v，所返回的插入位置视情况而定，不一定在position位置前插入。
    --voidinsert(InputIterator first, InputIterator last)
	将迭代器区间[first,last)所指的数据作为容器元素（包括键值和映照数据），插入到map容器中。
    --void erase(iteratorposition); 删除 position所指的元素
    --size_type erase(const key_type& k);  删除等于键值 k的那个元素，对于map容器来说，此函数总是返回值1，因为map容器不会出现重复的元素值（键值）
    --void erase(iterator first, iterator last); 删除map迭代器区间 [first,last)上的所有元素
    --void clear(); 删除map容器的所有元素
    --其他成员函数用法与前篇set容器相似


元素
3.迭代器
（1）基本
声明
vector<double>::iterator pd;
赋值
vector<double> scores;
pd = scores.begin();
操作
*pd = 22.3;
++pd;
遍历
for(pd = scores.begin();pd!=scores.end();pd++)
{ cout <<*pd <<endl;}

4.函数/函数对象
（1）函数对象
    重载函数调用操作符的类，其对象常称为函数对象（function object），即它们是行为类似函数的对象。又称仿函数。
    函数对象,也叫函数符,是可以以函数方式与()结合使用的任意对象.这包括函数吗,指向函数的指针,和重载了()运算符的类对象.如:
    定义一个类
    class Linear
    {
    private:
	double slope;
	double y0;
    public:
	Linear(double s1 = 1, double y_=0):slope(s1_),y0(y_){}
        double operator()(double x){return y0+slope*x;}
    }
    这样,重载的()运算符将使得能够像函数那样使用Linear对象;
    Linear line(2.5,10.0);
    double y = line(0.4);
    
（2）for_each()
    接受三个参数，前两个是定义容器中区间的迭代器，最后一个是指向函数对象。
for_each()函数将被指向的函数应用于容器区间中的各个元素。
    vector<Review>::iterator pr;
    for(pr = books.begin(); pr!=books.end();pr++)
    { ShowReview(*pr); }
    可以改写成：
    for_each(books.begin(),books.end(),ShowReview);
---
基于范围的for循环（c++11)
    for(double x:preices){cout << x << endl;}
    for(auto x:books){ShowReview(x);}
    for(auto &x:books){InflateReview(x);}
（3）random_shuffle()
    接受两个指定区间的迭代器参数，并随机排列该区间中的元素。
    与可用于任何容器类的for_each不同，该函数要求容器类允许随机访问。
    random_shuffle(books.begin(),books.end());
（4）sort()
    sort()函数也要求容器支持随机访问。
    通过operator<或函数对象实现排序
    如果容器元素是用户定义的对象，则要使用sort()，必须定义能够处理该类型对象的operator<()函数
    bool operator<(const Review& r1,const Revieww& r2){...}
    sort(books.begin(),books.end());
    ---
    bool WorseThan(const Review& r1,const Review& r2){...}
    sort(book.begin(),books.end(),WorseThan);
(5)copy()
    std::copy(start, end, std::back_inserter(container)); 
    std::copy(start, end, std::iterator); 	//在这里你在container的头部执行了copy－over（覆盖赋值）操作，但是，如果container的大小小于输入序列的长度N的话，这段代码会导致崩溃（crash）。
    如果要把一个序列（sequence）拷贝到一个容器（Container）中去.copy只负责复制，不负责申请空间，所以复制前必须有足够的空间
--例子:
    int myints[] = {10, 20, 30, 40, 50, 60, 70};  
    vector<int> myvector;  
    vector<int>::iterator it;  
    myvector.resize(7);   // 为容器myvector分配空间       
    //copy用法一：  
    //将数组myints中的七个元素复制到myvector容器中  
    copy ( myints, myints+7, myvector.begin() );  
    //copy用法二:  
    //将数组myints中的元素向左移动一位  
    copy(myints + 1, myints + 7, myints);  
(6)find()
    std::find(first, end, value);
    返回区间[first，end）中第一个值等于value的元素位置；若未找到，返回end。函数返回的是迭代器或指针，即位置信息
    std::find_if(first, end, bool pred)
    返回区间[first，end)中使一元判断式pred为true的第一个元素位置；若未找到，返回end。
    std::find_first_of(first1, end1, first2, end2)
    返回第一个区间迭代器位置，满足第一个区间[first1，end1)中的元素第一次出现在第二个区间[first2，end2)中。
