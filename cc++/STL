标准模板库
1. 含义
    STL提供了一组表示容器、迭代器、函数对象和算法的模板。
    容器是一个与数组类似的单元，可以存储若干个值。STL容器是同质的，即存储的值类型相同。
    算法是完成特定任务，如对数组进行排序或在链表查找特定值等。
    迭代器是能够用来遍历容器的对象，是广义指针。
    函数对象是类似于函数的对象，可以是类对象或函数指针。
    STL不是面向对象编程，而是泛型编程。

2.容器
（1）基本
    容器概念是具有名称（容器、序列容器、关联容器等）的通用类别。
    容器类型是可用于创建具体容器对象的模板：包括
    deque\list\queue\priority_queue\stack\vector\map\multimap\set\multiset\bitset
    (c++11新增）forward_list\unordered_map\unordered_multimap\unordered_set\unordered_multiset
    ---
    所有的STL容器都提供了一些基本方法，包括：
    size()  //返回容器中元素数目。
    swap()  //交换两个容器的内容
    begin() //返回一个指向容器中第一个元素的迭代器
    end()   //返回一个超过容器尾的迭代器,即指向容器最后一个元素后面的那个元素，与'\0'功能类似。

(2)序列（sequence）
    通过添加要求来改进基本的容器概念
    序列容器类型包括:
    forward_list\list\queue\priority_queue\stack\vector
    序列的要求：
    表达式		返回类型		说明
    X a(n,t)					声明一个名为a的由n个t值组成的序列
    X(n,t)					创建一个由n个t值组成的匿名序列
    X a(i,j)					?声明一个名为a的序列，并将其初始化为区间[i,j)的内容
    X(i,j)					?创建一个匿名序列，并将其初始化为区间[i,j)的内容
    a.insert(p,t)	迭代器			将t插入到p的前面
    a.insert(p,n,t)	void			将n个t插入到p的前面
    a.insert(p,i,j)	void 			?将区间[i,j)中的元素插入到p的前面
    a.erase(p)		迭代器			删除p指向的元素
    a.erase(p,q)	迭代器			删除[p,q)中的元素
    a.clear()		void			等价于erase(begin(),end());
    ---还有一些可选要求---
    表达式		返回类型	含义			容器
    a.front()		T&		*a.begin()		vector,list,deque
    a.back()		T&		*--a.end()		vector,list,deque
    a.push_front(t)	void 		a.insert(a.begin(),t)	list,deque
    a.push_back(t)	void		a.insert(a.end(),t)	vector,list,deque
    a.pop_front(t)	void 		a.erase(a.begin())	list,deque
    a.pop_back(t)	void 		a.erase(--a.end())	vector,list,deque
    a[n]		T&		*(a.begin()+n)		vector,deque
    a.at(t)		T&		*(a.begin()+n)		vector,deque

(3)vector
    参见array

(4)deque
    头文件：<deque>
    含义：双端队列

(5)list
    头文件：<list>
    含义：双向链表
    成员函数：
	void merge(list<T,Alloc>&x)	//将链表x与调用链表合并。两个链表必须已经排序。合并后保存在调用链表中，x为空。
	void remove(const T& val)	//从链表中删除val的所有实例
	void sort()			//使用<运算符排序，复杂度NlogN
	void splice(iterator pos,list<T,Alloc>x)	//将链表x的内容插入到pos前面，x将位空。
	void unique()			//将连续的相同元素压缩为单个元素。

(6)forward_list
    含义：单向链表

(7)queue
    头文件：<queue>
    含义：一个适配器类，让底层类（deque）展示典型的队列接口
    成员函数：
    	bool empty()const		//如果队列为空，则返回true，否则false
	size_type size()const		//返回队列中元素的数目
	T& front()			//返回指向队首元素的引用
	T& back()			//返回指向队尾元素的引用
	void push(const T& x)		//在队尾插入x
	void pop()			//删除队首元素

(8)priority_queue
    头文件：<queue>
    含义：一个适配器类，最大元素被移到队首，默认的底层类是vector。

(9)stack
    头文件：<stack>
    含义：一个适配器类，给底层类（vector)提供典型的栈接口。 
    成员函数：
	bool empty()const		//如果栈为空，则返回true，否则false
	size_type size()const		//返回栈中元素的数目
	T& top()			//返回指向栈顶元素的引用
	void push(const T& x)		//在栈顶插入x
	void pop()			//删除栈顶元素
元素
3.迭代器
（1）基本
声明
vector<double>::iterator pd;
赋值
vector<double> scores;
pd = scores.begin();
操作
*pd = 22.3;
++pd;
遍历
for(pd = scores.begin();pd!=scores.end();pd++)
{ cout <<*pd <<endl;}

4.函数/函数对象
（1）基础
（2）for_each()
    接受三个参数，前两个是定义容器中区间的迭代器，最后一个是指向函数对象。
for_each()函数将被指向的函数应用于容器区间中的各个元素。
    vector<Review>::iterator pr;
    for(pr = books.begin(); pr!=books.end();pr++)
    { ShowReview(*pr); }
    可以改写成：
    for_each(books.begin(),books.end(),ShowReview);
---
基于范围的for循环（c++11)
    for(double x:preices){cout << x << endl;}
    for(auto x:books){ShowReview(x);}
    for(auto &x:books){InflateReview(x);}
（3）random_shuffle()
    接受两个指定区间的迭代器参数，并随机排列该区间中的元素。
    与可用于任何容器类的for_each不同，该函数要求容器类允许随机访问。
    random_shuffle(books.begin(),books.end());
（4）sort()
    sort()函数也要求容器支持随机访问。
    通过operator<或函数对象实现排序
    如果容器元素是用户定义的对象，则要使用sort()，必须定义能够处理该类型对象的operator<()函数
    bool operator<(const Review& r1,const Revieww& r2){...}
    sort(books.begin(),books.end());
    ---
    bool WorseThan(const Review& r1,const Review& r2){...}
    sort(book.begin(),books.end(),WorseThan);

    
    
