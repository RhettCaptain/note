标准模板库
1. 含义
    STL提供了一组表示容器、迭代器、函数对象和算法的模板。
    容器是一个与数组类似的单元，可以存储若干个值。STL容器是同质的，即存储的值类型相同。
    算法是完成特定任务，如对数组进行排序或在链表查找特定值等。
    迭代器是能够用来遍历容器的对象，是广义指针。
    函数对象是类似于函数的对象，可以是类对象或函数指针。
    STL不是面向对象编程，而是泛型编程。

2.容器
（1）基本
    所有的STL容器都提供了一些基本方法，包括：
    size()  //返回容器中元素数目。
    swap()  //交换两个容器的内容
    begin() //返回一个指向容器中第一个元素的迭代器
    end()   //返回一个超过容器尾的迭代器,即指向容器最后一个元素后面的那个元素，与'\0'功能类似。
(2)vector
    参见array

3.迭代器
（1）基本
声明
vector<double>::iterator pd;
赋值
vector<double> scores;
pd = scores.begin();
操作
*pd = 22.3;
++pd;
遍历
for(pd = scores.begin();pd!=scores.end();pd++)
{ cout <<*pd <<endl;}

4.函数/函数对象
（1）基础
（2）for_each()
    接受三个参数，前两个是定义容器中区间的迭代器，最后一个是指向函数对象。
for_each()函数将被指向的函数应用于容器区间中的各个元素。
    vector<Review>::iterator pr;
    for(pr = books.begin(); pr!=books.end();pr++)
    { ShowReview(*pr); }
    可以改写成：
    for_each(books.begin(),books.end(),ShowReview);
---
基于范围的for循环（c++11)
    for(double x:preices){cout << x << endl;}
    for(auto x:books){ShowReview(x);}
    for(auto &x:books){InflateReview(x);}
（3）random_shuffle()
    接受两个指定区间的迭代器参数，并随机排列该区间中的元素。
    与可用于任何容器类的for_each不同，该函数要求容器类允许随机访问。
    random_shuffle(books.begin(),books.end());
（4）sort()
    sort()函数也要求容器支持随机访问。
    通过operator<或函数对象实现排序
    如果容器元素是用户定义的对象，则要使用sort()，必须定义能够处理该类型对象的operator<()函数
    bool operator<(const Review& r1,const Revieww& r2){...}
    sort(books.begin(),books.end());
    ---
    bool WorseThan(const Review& r1,const Review& r2){...}
    sort(book.begin(),books.end(),WorseThan);

    
    
