一、数组
1.初始化
int card[10];			//OK
int card[10] = {3, 4, 5};	//OK
int card[] = {3, 4, 5};		//OK，不建议.NO in c++11
int card2[10] = card;		//NO
int card2[num];			//在c++中，如果num是const或常量表达式OK，否则或在c中NO
int card3[3] {3, 4, 5}		//OK in c++11
int card3[] {}			//OK in c++11

二、模板类 vector
1 基本操作
(1)头文件#include<vector>.
(2)创建vector对象，vector<int> vec;
(3)尾部插入数字：vec.push_back(a);
(4)使用下标访问元素，cout<<vec[0]<<endl;记住下标是从0开始的。
(5)使用.at()访问元素，cout<<vec.at(0)<<endl;at()会检查越界，下标不会
(6)使用迭代器访问元素.
vector<int>::iterator it;
for(it=vec.begin();it!=vec.end();it++)
    cout<<*it<<endl;
(7)插入元素：    vec.insert(vec.begin()+i,a);在第i+1个元素前面插入a;
vec.insert(vec1.begin(),vec2.begin()+1,vec2.end());在vec1前面插入vec2除去第一个元素的部分;
(8)删除元素：    vec.erase(vec.begin()+2);删除第3个元素
vec.erase(vec.begin()+i,vec.end()+j);删除区间[i,j-1];区间从0开始
(9)向量大小:vec.size();
(10)清空:vec.clear();
(11)队首元素:vec.front();	//相当于*vec.begin()
(12)队尾元素:vec.back();	//相当于*--a.end()

2.初始化
vector< int > ivec( 10 );  //类似数组定义int ia[ 10 ];
vector< int > ivec( 10, -1 ); //定义了 ivec 它包含十个int型的元素 每个元素都被初始化为-1 
vector<vector<int> > ivec;		//定义二维vector，注意vector<int>后加个空格
ivec[i].resize(Col);	//每行初始化列数

3.将一个vector内容赋值给另一个vector
方法1：
vector<int > v1(v2);//声明
方法2：使用swap进行赋值：
vector<int > v1();v1.swap(v2);//将v2赋值给v1，此时v2变成了v1
方法3：使用函数assign进行赋值：
vector<int > v1;//声明v1
v1.assign(v2.begin(), v2.end());//将v2赋值给v1
 方法4：使用循环语句赋值，效率较差
vector<int >::iterator it;//声明迭代器
for(it = v2.begin();it!=v2.end();++it){//遍历v2,赋值给v1

4.清空
第一种办法使用 clear ，清空元素，但不回收空间
    vecInt.clear();
    j= vecInt.capacity();      //j=512
    i = vecInt.size();         //i=0
    v1.push_back(it);}
第二种办法使用 erase循环删除，结果同上
vector <int>::iterator iter=vecInt.begin();
    for ( ;iter!=vecInt.end();)
    {
        iter=vecInt.erase(iter);
    }
    j= vecInt.capacity();      //j=512
    i = vecInt.size();         //i=0       
第三种办法 最简单的使用swap,清除元素并回收内存
    vector<int>().swap(vecInt);  //清除容器并最小化它的容量，
//   vecInt.swap(vector<int>()) ;     另一种写法
    j= vecInt.capacity();       //j=0  
    i = vecInt.size();          //i=0         

5.反转
    rbegin()	返回一个指向反转序列的第一个元素的迭代器
    rend()	返回反转序列的超尾迭代器
    for_each(dice.rbegin(),dice.rend(),Show);	//反转输出

三、模板类 array(c++ 11)
1.头文件：<array>
2.声明：
	array<int ,5> ai;	//必须指明数组大小且不可变更
3.初始化：
	array<double, 4> ad={1.2, 2.1, 3.4,4.3};
4.赋值：
	可以用一个array赋值另一个array，如a1=a2;

四、数组，vector，array比较
1.都可以通过标准书表示法访问各个元素。
2.数组和array对象存储在栈中，vector存储在堆或自由存储空间，故vector效率较低。
3.三者都没有越界检查，vector和array可以通过.at()访问，通过.begin()和end()防止越界。
4.只有array可以用一个对象赋值另一个对象。

五、模板类valarray
1.头文件：valarray
2.初始化/构造函数
    double gps[5] = {3.1,2.4,5.2,1.5,5.2};
    valarray<double> v1;	//size 0
    valarray<int> v2(8);	//size 8
    valarray<int> v3(10,8);	//8个10
    valarray<double> v4(gpa,4);	//初始化位gps的前4个
3.方法
    -operator[]():访问各个元素
    -size():返回包含的元素数
    -sum():返回所有元素的总和
    -max():返回最大的元素
    -min():返回最小的元素


