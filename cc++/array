一、数组
1.初始化
int card[10];			//OK
int card[10] = {3, 4, 5};	//OK
int card[] = {3, 4, 5};		//OK，不建议.NO in c++11
int card2[10] = card;		//NO
int card2[num];			//在c++中，如果num是const或常量表达式OK，否则或在c中NO
int card3[3] {3, 4, 5}		//OK in c++11
int card3[] {}			//OK in c++11

2.（二维/高维/字符）数组传参，数组指针，指针数组
（1）可修改性
数组类型（数组名）是不可修改的（不允许拷贝和赋值），可以认为是const 指针，即指针常量。普通指针是可以修改的，但要分配内存
char a[3];
a="ab"	//不行
char b[3] = a; //不行
---
char* a;
a="ab"  //可以，但要分配内存a = new char[3];
（2）二维数组，数组指针和指针数组
严格意义上c++没有高维数组，只是数组的数组的数组...
char a[2][12];	//二维数组，可以理解成a[2]这个数组有两个元素，每个元素是一个包含12个元素的数组
a[1] = "adfa";  //不行，数组名虽然等价于指针，但是右值，指针可以修改
（左值指的是既能够出现在等号左边也能出现在等号右边的变量(或表达式)，右值指的则是只能出现在等号右边的变量(或表达式).）
strcpy(a[0],"adfa");	//可以
---
char (*a)[12];	//数组指针，a是一个指针，指向一个有12个char元素的数组，即是一个二级指针
a[0] = "adfa";  //不行
strcpy(a[0],"adfa");//可以，但要先分配空间a = (char (*)[12])malloc(12);或a = (char(*)[12])new char*;
---
char* a[12];	//指针数组，一个数组，包含12个char*指针
a[1] = "adfa";  //可以
*a = "fd";	//可以
//但如果不是常量字符串，也要注意分配内存
（3）内存分配
一般按行分配
char a[2][2]
a[0][0] 0x00;a[0][1] 0x04;
a[1][0] 0x08;a[1][1] 0x0c;
a+1 = a[1] 0x08
（4）数组传参参数
void func(char s[10]);	//s类型 char*，注意：数组退化为指针 1）指针的变化是不影响外部的，除非去二级指针传参。2）这只是个指针，没有分配内存，但实参可能分配了。
void func(char s[10][20]);或void func(char s[][20]);或void func(char (*s)[20]);	//s类型 char (*)[20]，数组指针，s+1内存下移20个字节
    //s[1][2] 可以用*(*(s+1)+2)表示
void func(char* s[20]);或void func(char** s);	//s类型 char** 显然，不能使用s[1][2]这种，但可以通过行列用指针推算。s+1内存下移1个字节
    //s[1][2] 可以用*(s+1*20+2)表示 
---
可以将数组指针强制转换为一维指针，然后按照内存中存储的方法计算二维数组对应成一维数组的下标
    void test(int *a,int row,int column,int m,int n){ cout<<a[m*column+n];}
    int main(){int a[3][4]={{1,3,5,7},{9,11,13,15},{17,19,21,23}};test((int*)a,3,4,1,1);}
也可以将数组指针强制转换位二维指针，然后按照内存中存储的方法计算二维数组对应成一维数组的下标，建议用上一种方法。

二、模板类 vector
头文件#include<vector>.

1.定义与初始化
vector<int> ivec;	//定义
vector<int> ivec(10);  //类似数组定义int ia[ 10 ];,此处有10个0
vector<int> ivec(10,-1); //定义了 ivec 它包含十个int型的元素 每个元素都被初始化为-1 
vecotr<int> ivec={1,2};	//包含1,2
vecotr<int> ivec{3};		//包含1个3
vector<vector<int> > ivec;		//定义二维vector，注意vector<int>后加个空格
ivec[i].resize(Col);	//每行初始化列数

2.将一个vector内容赋值给另一个vector
方法1：
vector<int > v1(v2);//初始化赋值
方法2：使用swap进行赋值：
vector<int> v1;v1.swap(v2);//将v2赋值给v1，此时v2变成了v1
方法3：使用函数assign进行赋值：
vector<int > v1;//声明v1
v1.assign(v2.begin(), v2.end());//将v2赋值给v1
 方法4：使用循环语句赋值，效率较差
vector<int >::iterator it;//声明迭代器
for(it = v2.begin();it!=v2.end();++it){//遍历v2,赋值给v1

3.添加元素
(1)尾部插入数字：vec.push_back(a);
(2)插入元素：    vec.insert(vec.begin()+i,a);在第i+1个元素前面插入a;
vec.insert(vec1.begin(),vec2.begin()+1,vec2.end());在vec1前面插入vec2除去第一个元素的部分;

4.访问
(1)使用下标访问元素，cout<<vec[0]<<endl;记住下标是从0开始的。
(2)使用.at()访问元素，cout<<vec.at(0)<<endl;at()会检查越界，下标不会
(3)使用迭代器访问元素.
vector<int>::iterator it;
for(it=vec.begin();it!=vec.end();it++)
    cout<<*it<<endl;
(4)队首元素:vec.front();	//相当于*vec.begin()
(5)队尾元素:vec.back();	//相当于*--a.end()
    
5.删除与清空
删除元素：    vec.erase(vec.begin()+2);删除第3个元素
vec.erase(vec.begin()+i,vec.end()+j);删除区间[i,j-1];区间从0开始
清空元素：
第一种办法使用 clear ，清空元素，但不回收空间
    vecInt.clear();
    j= vecInt.capacity();      //j=512
    i = vecInt.size();         //i=0
    v1.push_back(it);}
第二种办法使用 erase循环删除，结果同上
vector <int>::iterator iter=vecInt.begin();
    for ( ;iter!=vecInt.end();)
    {
        iter=vecInt.erase(iter);
    }
    j= vecInt.capacity();      //j=512
    i = vecInt.size();         //i=0       
第三种办法 最简单的使用swap,清除元素并回收内存
    vector<int>().swap(vecInt);  //清除容器并最小化它的容量，
//   vecInt.swap(vector<int>()) ;     另一种写法
    j= vecInt.capacity();       //j=0  
    i = vecInt.size();          //i=0         

6.反转
    rbegin()	返回一个指向反转序列的第一个元素的迭代器
    rend()	返回反转序列的超尾迭代器
    for_each(dice.rbegin(),dice.rend(),Show);	//反转输出
    vector<int>::reverse_iterator it = vecInt.rbegin();	//注意迭代器类型不同

7.其他
  v.empty();
  v.size();
  v1==v2;v1!=v2;
  
8.迭代器注意
（1）反转迭代器
vector<int>::reverse_iterator
（2）解除引用
注意优先级
*it.mem();	//错误
(*it).mem();	//正确
三、模板类 array(c++ 11)
1.头文件：<array>
2.声明：
	array<int ,5> ai;	//必须指明数组大小且不可变更
3.初始化：
	array<double, 4> ad={1.2, 2.1, 3.4,4.3};
4.赋值：
	可以用一个array赋值另一个array，如a1=a2;

四、数组，vector，array比较
1.都可以通过标准书表示法访问各个元素。
2.数组和array对象存储在栈中，vector存储在堆或自由存储空间，故vector效率较低。
3.三者都没有越界检查，vector和array可以通过.at()访问，通过.begin()和end()防止越界。
4.只有array可以用一个对象赋值另一个对象。

五、模板类valarray
1.头文件：valarray
2.初始化/构造函数
    double gps[5] = {3.1,2.4,5.2,1.5,5.2};
    valarray<double> v1;	//size 0
    valarray<int> v2(8);	//size 8
    valarray<int> v3(10,8);	//8个10
    valarray<double> v4(gpa,4);	//初始化位gps的前4个
3.方法
    -operator[]():访问各个元素
    -size():返回包含的元素数
    -sum():返回所有元素的总和
    -max():返回最大的元素
    -min():返回最小的元素


