文件操作
一、C语言操作
1.头文件
<stdio.h>

2.打开关闭文件
FILE *fp;
fp=fopen("a1","r");	//函数原型：FILE * fopen(const char * path,const char * mode);
fclose(fp);

常用mode:
“r” 以只读方式打开文件，该文件必须存在。
“r+” 以可读写方式打开文件，该文件必须存在。
“w” 打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。
“w+” 打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。
“a” 以附加的方式打开只写文件。若文件不存在，则会建立该文件，
		如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。（EOF符保留）

3.文件输入输出
（1）顺序读写
函数名 调用形式 功能 返回值
fgetc fgetc(fp) 从 fp 指向的文件读入一个字符 成功，带回所读的字符;失败则返回文件结束标志 EOF（即 -1）
fputc fputc(ch,fp) 把字符 ch 写到文件指针变量 fp 所指向的文件中 输出成功，返回值就是输出的字符；输出失败，则返回 EOF（即 -1）
（2）随机读写
实现随机读写的关键是要按要求移动位置指针，也就是文件的定位。
移动文件内部的位置指针的函数主要有两个，即 rewind（）和 fseek（）。
rewind 函数的调用形式为：rewind（文件指针）;，它的功能是把文件内部的位置指针移到文件开头。
fseek（文件指针，位移量，起始点）; 。其中：“文件指针”指向被移动的文件；“位移量”表示移动的字节数，
要求位移量是 long 型数据，以便在文件长度大于 64KB 时不会出错，
当用常量表示位移量时，要求加后缀“ L ”；“起始点”表示从何处开始计算位移量，
规定的起始点有三种：文件首，当前位置和文件尾。
其表示方法如下表：
起始点 表示符号 数字表示
文件首 SEEK_SET 0
当前位置 SEEK_CUR 1
文件末尾 SEEK_END 2
---
例如：
fseek(fp,100L,0);
---

二、c++操作
1.头文件
<fstream>

2.主要步骤
（1）包含头文件fstream
（2）创建一个ofstream/ifstream对象
（3）将ofstream/ifstream对象同一个文件关联起来。
（4）就像使用cin/cout那样使用对象

3.写文件/输出
(1)示例
#include <fstream>
#include <string>
using namespace std;
int main()
{
	ofstream outfile;
	outfile.open("test.txt");
	double wt = 125.8;
	string str = "hello";
	outFile << wt << endl;
	outFile << str;
	outFile.close();
}	
(2)ostream对象方法
--open(char* filename);	//打开文件，没有创建，存在覆盖
--close()；		//关闭文件，程序结束时自动调用
--setf();		//?
--precision(int n);	//? n位有效数字？

4.读文件/输入
（1）示例
#include <fstream>
#include <string>
using namespace std;
int main()
{
	ifstream infile;
	infile.open("test.txt");
	double wt;
	string str;
	infile >> wt;
	infile >> str;
}
（2）istream对象方法
--open(char* filename);	//打开文件
--close();
--is_open()	//是否打开成功
--good();	//指出最后一次读取输入的操作是否成功
--eof();	//是否到达EOF；
--fail();	//是否到达EOF或类型不匹配

