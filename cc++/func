函数
一、参数与传值
1.普通
int func(int para);	
可以看做形参是函数内定义的一个变量。使用函数时，将实参复制给了形参，相当于创建了形参的副本。
而当函数运行完，形参内存被释放，所以在函数内操作形参不影响实参的值。
当形参与全局变量同名时，认为是形参变量。

2.数组参数
void func(int arr[],int n);
void func(int* arr,int n);
上面两者是等价的。使用时用数组名或数组地址做参数都可以。
由于传递的是地址，故修改地址的值会影响到实参。
但传递时会丢失数组信息，即不能通过sizeof判断数组长短，需要人工输入数组长度n。
void func(int (*ar2)[4],int size);
void func(int ar2[][4],int size);
以上是二维数组的声明。

3.字符串
(1)c-风格字符串
char* createStr(){
	char* str = new char[10];
	//char str[10];		好像也行，但会有warning,而且字符串输出不了。不用也不能delete。
	//str = "hello";	不行，这样str指向hello的新地址，而不是new的内存，无法delete
	str[0]='i';
	str[1]='\0';
	return str;	
}
int main(){
	char* out = createStr();
	cout << out << endl;
	delete[] out;		//指针变量str在函数结束时就释放了，但其指向的内存需要手动delete
}

4.引用变量
（1）创建引用变量
int rat =10;
int& ref = rat;
ref是rat的引用/别名，指向同一个内存地址，故操作ref，rat也会改变。
引用变量类似const指针，必须在创建时初始化，相当于绑定地址。
（2）按引用传递
	将引用用作函数参数，称为按引用传递。它和按指针传递都能改变变量本身。而按值传递只能改变副本，不改变变量本身。
	如果只想传递信息，而不想进行修改，则可以使用常量引用，如double refcube(const double &ra);
（3）返回引用
	按值返回实质是计算return后面的表达式，复制到一个临时位置，然后再复制给调用的变量。
	按引用返回直接将变量复制给调用的变量，效率更高。
        不要返回指向局部变量或临时对象的引用。函数执行完毕后，局部变量和临时对象将消失，引用将指向不存在的数据。
demo：
//正确
//定义
free_throws& acc(free_throws& target)
{
	target.made += source.made;
	return target;
}
free_throws dup = acc(team);	//使用
//错误
//该函数返回一个指向临时变量newguy的引用，函数运行完毕后，它将不再存在。
free_throws& clone(free_throws &ft)
{
	free_throws newguy;
	newguy = ft;
	return newguy;
}
（4）何时使用引用参数
--使用引用参数的主要原因
    程序员能够修改调用函数中的数据对象
    通过传递引而不是整个数据对象，可以提高程序的运行速度。
--对于使用传递的值而不做修改的函数
    如果数据对象很小，如内置数据类型或小型结构，则按值传递
    如果数据对象是数组，则使用指针，因为这是唯一的选择，并将指针声明位指向const的指针。
    如果数据对象是较大的结构，则使用const指针或const引用，以提高程序的效率，节省复制所需时间和空间。
    如果数据对象是类对象，则使用const引用。传递类对象的标准方式是按引用传递。
--对于修改调用函数中数据的函数。
    如果对象是内置数据类型，则使用指针。
    如果数据对象是数组，则使用指针。
    如果数据对象是结构，则使用引用或指针
    如果数据对象是类对象，则使用引用。

5.三种传递比较
（1）按引用传递
void swapr(int &a, int &b)
{
        int temp;
        temp = a;
        a = b;
        b = temp;
}
（2）按指针传递
//正确,能改变变量
//因为是对地址进行操作
void swapp1(int* p,int* q)
{
        int temp;
        temp = *p;
        *p = *q;
        *q = temp;
}
//错误，不能改变变量
//地址/指针进来也是拷贝的副本，没有影响原来的指针变量。
void swapp1(int* p,int* q)
{
        int* temp;
        temp = p;
        p = q;
        q = temp;
}
（3）按值传递
void swapv(int a, int b)
{
        int temp;
        temp = b;
        b = a;
        a = temp;
}

6.默认参数
（1）使用方法
	在原型中声明，如void test(char ch,int n=1);函数定义中不需要，如void test(cahr ch,int n);
	必须从右向左添加默认值，即要为某个参数设置默认值，则必须位它右边的所有参数提供默认值。

二、函数指针
1.步骤：
---获取函数的地址---
  使用函数名（不跟参数和括号）即可
  process(think);	//think是think()的地址
---声明一个函数指针---
  原型：double pam(int);//prototype
  声明：double (*pf)(int);
	//double *pf(int);//pf是一个返回double*的函数
  赋值：pf = pam;
---使用函数指针来调用函数---
  double x =(*pf)(5);
  double y = pf(5);	//两种都可以，建议上一种。
2.demo:
#include <iostream>
double betsy(int);
double pam(int);
void estimate(int lines, double (*pf)(int));
int main(){
	using namespace std;
	int code;
	cout << "HOw many linesof code do you need?";
	cin >> code;
	cout << "here is betsy's estimate:\n";
	estimate(code,betsy);
	cout << "here is pam's estimate:\n";
	estimate(code,pam);
	return 0;
}
double betsy(int lns){
	return 0.05 * lns;
}

double pam(int lns){
	return 0.01 * lns * lns;
}
void estimate(int lines,double (*pf)(int)){
	using namespace std;
	cout << lines << "lines will take ";
	cout <<(*pf)(lines) << "hours\n";
}

三、内联函数
1.作用：
	相当于为每处调用提供函数副本，而不是跳转。
	牺牲内存提高速度。
2.使用：
	在函数声明或函数定义前加上关键字inline
	如inline double square(double x);
	使用正常。

四、函数模板
1.格式：
　　template <typename 泛型名> 
  返回类型 函数名(参数列表)
　　{函数体}
  如：template <typename T> 
      void swap(T& a, T& b){}
  有的时候typename可以用class代替（C++98之前使用class）。
2.使用：
  直接使用，如
  int a=1,b=2;
  swap(a,b);
3.具体化
  隐式实例化、显式实例化和显式具体化统称为具体化
  它们表示的都是使用具体类型的函数定义，而不是通用描述
--显式具体化
  当编译器找到与函数调用匹配的具体化定义时，将使用该定义，而不再寻找模板。
  对于给定的函数名，可以有非模板函数、模板函数和显式具体化模板函数以及它们的重载版本。
  显式具体化的原型和定义应以template<>打头，并通过名称来指出类型。
  template <> void swap<job>(job &j1,job &j2);	//显示具体化原型
--实例化
  模板不实例化函数定义
  使用时编译器隐式生成函数定义。
  也可以使用显式实例化生成特定的函数定义，格式为
  template void swap<int>(int,int);	//原型。注意与具体化的区别。
