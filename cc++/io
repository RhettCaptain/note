输入输出
一.概述
1.流和缓冲区
    c++把输入输出看做字节流.输入时,程序从输入流中抽取字节;输出时,程序将字节插入到输出流中,而不用管流源或流目标.
    通常通过使用缓冲区作为中介的内存块,它是将信息从设备传输到程序或从程序传输给设备的临时存储工具.这将有助于匹配流两端不同的传输速率.
2.I/O类
    streambuf类:位缓冲区提供内存,并提供相关方法
    ios_base类:表示流的一般特征
    ios类:基于ios_base,包括了一个指向streambuf对象的指针成员.
    ostream类:从ios类派生,提供输出方法
    istream类:从ios类派生,提供输入方法.
    iostream类:基于isteram类和ostream类

二、标准IO
1.输入
(1)c
使用scanf进行输入
scanf("<格式化字符串>"，<地址表>);	
    地址表是需要读入的所有变量的地址，而不是变量本身。这与printf()函数完全不同，要特别注意。各个变量的地址之间同","分开。
--格式化说明符：
格式化说明符与printf()函数中的格式说明符基本相同。但和printf()函数中格式字符串的用法有一些小区别。我们来看下面这个表。
格式字符	说明
%d	从键盘输入十进制整数
%o	从键盘输入八进制整数
%x	从键盘输入十六进制整数
%c	从键盘输入一个字符
%s	从键盘输入一个字符串
%f	从键盘输入一个实数
%e	与%f的作用相同
附加格式说明字符表                                         
字符	说明
L	输入"长"数据
H	输入"短"数据
M	指定输入数据所占宽度
*	空读一个数据
--空白字符/非空白字符
  空白字符会使scanf()函数在读操作中略去输入中的一个或多个空白字符。
  一个非空白字符会使scanf()函数在读入时剔除掉与这个非空白字符相同的字符。
如int a;scanf(" \n\n%*3d%d\n",&a); 
    输入：\n\n\n   432432432 输出：a = 432432 
    scanf格式化输入中有多个空格和’\n’，但是我们采用的是%d格式化输入，所以空格和’\n’等转义字符是没有读入的
    这里有一个”%*3d”，意思是跳过输入的前三个整型数字，从第四个数字开始读入
---
  char a[10]; scanf("%c%c%c",&a[0],&a[1],&a[2]);
    输入：a b c  输出：a[1] 为空格  
    采用“%c”输入时，scanf不仅会读入非空字符，遇到空格和’\n’等转义字符他也会读入。
---
  char a[10]; scanf("%s",a);
    输入：happy,  sad  输出：a为happy,
    ”%s”,遇到空格换行等转义字符不读入

(2)c++
使用cin进行输入
--基本方式
    cin >> a;	//使用>>运算符
    cin.get(ch1).get(ch2)>>ch3;	//使用get(char&)读取字符，即使该字符是空格、制表符或换行符。（>>读字符会忽略）
    while(cin.get(ch)){}	//到达文件尾为false，否则true（指向istream对象的引用）
    char ch = cin.get();	//使用int get()读取字符，即使该字符是空格、制表符或换行符。到达文尾时返回EOF
    char line[50]; cin.get(line, 50, '!');	//读取字符串，按指定字符作为分界符，默认换行符分界。
    char line[50]; cin.getline(line,50);	//和get类似，但前者将分界符留在输入队列，getline抛弃不保留。
    cin.ignore(255,'\n');	//读取并丢弃接下来的255个字符或直到到达第一个换行符。
    其他：read(),peek(),gcount(),putback()...

2.输出
(1)c
使用printf进行输出
如：printf("hello%x%lld\n",1,200);
在Turbo C中格式字符串的一般形式为：
    [标志][输出最小宽度][.精度][长度]类型。
	  ---
	  类型：
			d	以十进制形式输出带符号整数(正数不输出符号)
			o	以八进制形式输出无符号整数(不输出前缀0)
			x,X	以十六进制形式输出无符号整数(不输出前缀Ox)
			u	以十进制形式输出无符号整数
			f	以小数形式输出单、双精度实数
			e,E	以指数形式输出单、双精度实数
			g,G	以%f或%e中较短的输出宽度输出单、双精度实数
			c	输出单个字符
			s	输出字符串
	  标志：
			-	结果左对齐，右边填空格
			+	输出符号(正号或负号)
			空格	输出值为正时冠以空格，为负时冠以负号
			#	对c、s、d、u类无影响；
				对o类，在输出时加前缀o；
				对x类，在输出时加前缀0x；
				对e、g、f 类当结果有小数时才给出小数点。
	   输出最小宽度：
			用十进制整数来表示输出的最少位数。
			若实际位数多于定义的宽度，则按实际位数输出，若实际位数少于定义的宽度则补以空格或0。
			补0需要写个0，如%03d
	   精度：
			精度格式符以“.”开头，后跟十进制整数。本项的意义是：如果输出数字，则表示小数的位数；
			如果输出的是字符，则表示输出字符的个数；若实际位数大于所定义的精度数，则截去超过的部分。
	   长度：
			长度格式符为h、l两种，h表示按短整型量输出，l表示按长整型量输出。
(2)c++
使用cout进行输出
--基本方式
    cout << "hello" << endl;		//使用<<运算符
    cout.put('w'); cout.put('a').put('b');	//使用put方法输出字符
    char str[4] = "abc";cout.write(str,3);	//使用write方法输出字符串.
--刷新输出缓冲
    ostream类对cout对象的输出进行缓冲,所以输出不会立即发送到目标地址,而是被存储在缓冲区,直到缓冲区填满.
然后程序将刷新(flush)缓冲区,把内容发送出去,并清空缓冲区,以存储新的数据.
    除了等缓冲区被填满,换行符和即将发生输入时都将刷新缓冲区.如：
    cout << "enter a num"; float num; cin >> num; //会输出enter a num
    cout << "enter a num"; while(1){};	//不会输出。
    还可以通过cout << flush或flush(cout)手动刷新。
--格式化输出
进制
cout << dec/hec/oct; 或hex(cout) 切换计数进制，保持状态直到被切换
---
宽度
int a = cout.width();	//返回当前设置的字段宽度
int b = cout.width(12);	//设置最小宽度12，并返回之前设置的字段宽度，右对齐。
width方法只会影响接下来显示的一个项目。
c++不会截断数据，即如果设置12，数字有13宽，则输出13位宽
---
填充字符
默认填充空格，
cout.fill('*');	//改用*填充。一直2有效，直到被改变。
---
浮点数的显示精度
精度指小数点后面的位数，默认6位，但0不显示
cout.precision(2);	//设置精度为2，一直有效，直到被重置。
---
setf()
fmtflags setf(fmtflags);	//用来设置单个位控制的格式信息（0/1，类似寄存器位操作）
部分格式常量为：
ios_base::boolalpha	//输入和输出bool值，可以位true或false
ios_base::showbase	//对于输出，使用c++基数前缀（0,0x）
ios_base::showpoint	//显示末尾的小数点
ios_base::uppercase	//对于16进制输出，使用大写字母，E表示法
ios_base::showpos	//在正数前面加上+
如：cout.setf(ios_base::showpoint);	//此时输出2将输出2.000000
fmtflags setf(fmtflags,fmtflags);
第二个参数		第一个参数		含义
ios_base::basefield	ios_base::dec		使用基数10
			ios_base::oct		使用基数8
			ios_base::hex		使用基数16
ios_base::floatfield	ios_base::fixed		使用定点计数法
			ios_base::scientific	使用科学计数法
ios_base::adjustfield	ios_base::left		使用左对齐
			ios_base::right		使用右对齐
			ios_base::internal	符号或基数前缀左对齐，值右对齐
如：ios_base::fmtflags old = cout.setf(ios::left,ios::adjustfield);	// 左对齐
    cout.setf(old,ios::adjustfield);	//恢复以前的设置
---
标准控制符
boolalpha,noboolalpha
showbase,noshowbase
showpoint,noshowpoint
showpos,noshowpos
uppercase,nouppercase
internal,left,right
dec,hex,oct
fixed,scientific
如cout << hex;
---
头文件iomanip
setprecision()	设置精度
setfill()	设置填充字符
setw()		设置字段宽度
如：cout << setw(6) << setfill('.') << n << setfill(' ') << setprecision(3) << endl;

三、文件I/O
1.输入（读文件）
(1)c
--头文件
<stdio.h>

--打开关闭文件
	FILE *fp;
	fp=fopen("a1","r");	//函数原型：FILE * fopen(const char * path,const char * mode);
	fclose(fp);
	常用mode:
	“r” 以只读方式打开文件，该文件必须存在。
	“r+” 以可读写方式打开文件，该文件必须存在。
	“w” 打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。
	“w+” 打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。
	“a” 以附加的方式打开只写文件。若文件不存在，则会建立该文件，
			如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。（EOF符保留）

--文件输入输出
顺序读写
	函数名 调用形式 功能 返回值
	fgetc fgetc(fp) 从 fp 指向的文件读入一个字符 成功，带回所读的字符;失败则返回文件结束标志 EOF（即 -1）
	fputc fputc(ch,fp) 把字符 ch 写到文件指针变量 fp 所指向的文件中 输出成功，返回值就是输出的字符；输出失败，则返回 EOF（即 -1）
随机读写
	实现随机读写的关键是要按要求移动位置指针，也就是文件的定位。
	移动文件内部的位置指针的函数主要有两个，即 rewind（）和 fseek（）。
	rewind 函数的调用形式为：rewind（文件指针）;，它的功能是把文件内部的位置指针移到文件开头。
	fseek（文件指针，位移量，起始点）; 。其中：“文件指针”指向被移动的文件；“位移量”表示移动的字节数，
	要求位移量是 long 型数据，以便在文件长度大于 64KB 时不会出错，
	当用常量表示位移量时，要求加后缀“ L ”；“起始点”表示从何处开始计算位移量，
	规定的起始点有三种：文件首，当前位置和文件尾。
	其表示方法如下表：
	起始点 表示符号 数字表示
	文件首 SEEK_SET 0
	当前位置 SEEK_CUR 1
	文件末尾 SEEK_END 2
	---
	例如：
	fseek(fp,100L,0);
	---

(2)c++
使用ifstream读取文件
--步骤：
#include <fstream>	//包含头文件
ifstream fin;		//创建一个ifstream对象来管理输入流
fin.open("jellyjar.txt");//将对象与特定的文件关联
ifstream fis("jamjar.txt");//合并前两步
char ch='a';fin >> ch;	//以使用cin的方式使用该对象
fin.close();		//手动关闭连接，或等对象过期/程序终止自动关闭
--istream对象方法
  is_open()	//是否打开成功
  good();	//指出最后一次读取输入的操作是否成功
  eof();	//是否到达EOF；
  fail();	//是否到达EOF或类型不匹配
--文件模式
  描述文件如何被读、写、追加等。将流与文件关联时，都可以提供指定文件模式的第二个参数
  文件模式常量有：
  ios_base::in  打开文件，以便读取
  ios_base::out 打开文件，以便写入
  ios_base::ate  打开文件，并移到文件尾
  ios_base::app  追加到文件尾
  ios_base::trunc  如果文件存在，则截短文件
  ios_base::binary  二进制文件
如：ifstream fin("banjo",ios_base::in);	//输入默认参数
  ostream fout();  fout.open("harp“，ios_base::out|ios_base::trunc);	//输出默认参数，没有创建，存在覆盖
--随机存取
  seekg()将输入指针移动到指定的文件位置
  istream & seekg(streamoff,ios_base::seekdir);
  istream & seekg(streampos);
2.输出（写文件）
(1)c
(2)c++
使用ofstream写入文件
步骤：
#include <fstream> 		//包含头文件
ostream fout;			//创建一个ofstream对象来管理输出流
fout.open("jar.txt");		//将对象与特定的文件关联起来。
//ostream fout("jar.txt");	//可以合并前两步
fout << "dull data";		//以cout的方式使用该对象。唯一的区别是输出进入文件，而不是屏幕。
fout.close();			//手动关闭连接，或等对象过期/程序终止自动关闭
--随机存取
  seekp()将输出指针移动到指定的文件位置。

