输入输出
一.概述
1.流和缓冲区
    c++把输入输出看做字节流.输入时,程序从输入流中抽取字节;输出时,程序将字节插入到输出流中,而不用管流源或流目标.
    通常通过使用缓冲区作为中介的内存块,它是将信息从设备传输到程序或从程序传输给设备的临时存储工具.这将有助于匹配流两端不同的传输速率.
2.I/O类
    streambuf类:位缓冲区提供内存,并提供相关方法
    ios_base类:表示流的一般特征
    ios类:基于ios_base,包括了一个指向streambuf对象的指针成员.
    ostream类:从ios类派生,提供输出方法
    istream类:从ios类派生,提供输入方法.
    iostream类:基于isteram类和ostream类

二、标准IO
1.输入
(1)c
(2)c++
使用cin进行输入
--基本方式
    cin >> a;	//使用>>运算符
    cin.get(ch1).get(ch2)>>ch3;	//使用get(char&)读取字符，即使该字符是空格、制表符或换行符。（>>读字符会忽略）
    while(cin.get(ch)){}	//到达文件尾为false，否则true（指向istream对象的引用）
    char ch = cin.get();	//使用int get()读取字符，即使该字符是空格、制表符或换行符。到达文尾时返回EOF
    char line[50]; cin.get(line, 50, '!');	//读取字符串，按指定字符作为分界符，默认换行符分界。
    char line[50]; cin.getline(line,50);	//和get类似，但前者将分界符留在输入队列，getline抛弃不保留。
    cin.ignore(255,'\n');	//读取并丢弃接下来的255个字符或直到到达第一个换行符。
    其他：read(),peek(),gcount(),putback()...

2.输出
(1)c
(2)c++
使用cout进行输出
--基本方式
    cout << "hello" << endl;		//使用<<运算符
    cout.put('w'); cout.put('a').put('b');	//使用put方法输出字符
    char str[4] = "abc";cout.write(str,3);	//使用write方法输出字符串.
--刷新输出缓冲
    ostream类对cout对象的输出进行缓冲,所以输出不会立即发送到目标地址,而是被存储在缓冲区,直到缓冲区填满.
然后程序将刷新(flush)缓冲区,把内容发送出去,并清空缓冲区,以存储新的数据.
    除了等缓冲区被填满,换行符和即将发生输入时都将刷新缓冲区.如：
    cout << "enter a num"; float num; cin >> num; //会输出enter a num
    cout << "enter a num"; while(1){};	//不会输出。
    还可以通过cout << flush或flush(cout)手动刷新。
--格式化输出
进制
cout << dec/hec/oct; 或hex(cout) 切换计数进制，保持状态直到被切换
---
宽度
int a = cout.width();	//返回当前设置的字段宽度
int b = cout.width(12);	//设置最小宽度12，并返回之前设置的字段宽度，右对齐。
width方法只会影响接下来显示的一个项目。
c++不会截断数据，即如果设置12，数字有13宽，则输出13位宽
---
填充字符
默认填充空格，
cout.fill('*');	//改用*填充。一直2有效，直到被改变。
---
浮点数的显示精度
精度指小数点后面的位数，默认6位，但0不显示
cout.precision(2);	//设置精度为2，一直有效，直到被重置。
---
setf()
fmtflags setf(fmtflags);	//用来设置单个位控制的格式信息（0/1，类似寄存器位操作）
部分格式常量为：
ios_base::boolalpha	//输入和输出bool值，可以位true或false
ios_base::showbase	//对于输出，使用c++基数前缀（0,0x）
ios_base::showpoint	//显示末尾的小数点
ios_base::uppercase	//对于16进制输出，使用大写字母，E表示法
ios_base::showpos	//在正数前面加上+
如：cout.setf(ios_base::showpoint);	//此时输出2将输出2.000000
fmtflags setf(fmtflags,fmtflags);
第二个参数		第一个参数		含义
ios_base::basefield	ios_base::dec		使用基数10
			ios_base::oct		使用基数8
			ios_base::hex		使用基数16
ios_base::floatfield	ios_base::fixed		使用定点计数法
			ios_base::scientific	使用科学计数法
ios_base::adjustfield	ios_base::left		使用左对齐
			ios_base::right		使用右对齐
			ios_base::internal	符号或基数前缀左对齐，值右对齐
如：ios_base::fmtflags old = cout.setf(ios::left,ios::adjustfield);	// 左对齐
    cout.setf(old,ios::adjustfield);	//恢复以前的设置
---
标准控制符
boolalpha,noboolalpha
showbase,noshowbase
showpoint,noshowpoint
showpos,noshowpos
uppercase,nouppercase
internal,left,right
dec,hex,oct
fixed,scientific
如cout << hex;
---
头文件iomanip
setprecision()	设置精度
setfill()	设置填充字符
setw()		设置字段宽度
如：cout << setw(6) << setfill('.') << n << setfill(' ') << setprecision(3) << endl;
