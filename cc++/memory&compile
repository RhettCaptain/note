内存与编译
一、内存模型
1.自动存储、静态存储和动态存储
（1）自动存储
	一般的变量声明都是自动存储，其生命周期和作用域为包含他的代码块。
（2）静态存储
	静态存储是整个程序执行期间都存在的存储方式，使其静态的方法有：在函数外定义它，或使用static声明
示例：
void inc(){ static int a=1; a++; cout << a << endl;}
int main(){inc();inc();inc();}
//输出1,2,3
（3）动态存储
	前两种都在栈（stack）中存储，使用new/delete在堆（heap）或自由存储空间（free store）存储，称为动态存储。前两者内存分配一般都是连续的，后者不连续，难以跟踪。

2.内存泄露
	new了但没delete会造成内存泄露。包含指针的内存由于作用域规则和对象生命周期的原因而释放，但内存上分配的变量或结构却继续存在。由于指向该内存的指针无效，故无法访问这块内存，导致内存泄露。
	内存泄露会导致内存耗尽，或则自身程序或相关程序崩溃。

3.new/delete和malloc/free区别
    都可以用于申请动态内存和释放内存。
    但对于非内部数据类型的对象而言，只用malloc/free无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。

4.浅拷贝指针带来重复析构
如：
class CDemo{
public:
    CDemo():str(NULL){}
    ~CDemo(){ if(str) delete[] str;}
    char* str;
}；
int main(){
    CDemo d1;
    ...
    vector<CDemo>* a1=new vector<CDemo>();
    a1->push_back(d1);		//此处浅拷贝d1，会产生一个新CDemo对象，但str成员和d1的str相同
    delete a1;		//释放vector对象，vector所包含的元素也被释放，故str指向的地址被释放一次
}									//程序结束，d1对象被释放，又一次析构，str指向的地址又一次被释放，出错！
修改：
    编写深拷贝复制构造函数
    CDemo(const CDemo &cd){
        this->str = new char[strlen(cd.str)+1]
        strcpy(str,cd.str);
    }
二、编译
1.静态联编和动态联编
（1）概念：
-函数名联编（binding）：编译器将源代码中的函数调用解释为执行特定的函数代码块。
-静态联编（static binding）/早期联编（early binding）：
    在编译过程中进行联编，如c函数，重载函数。
-动态联编（dynamic binding）/晚期联编（late binding）：
    在运行时选择正确的代码，如虚函数的联编。
（2）比较
	静态联编比动态联编效率高，动态联编更灵活。
（3）虚函数工作原理
	编译器处理虚函数的方法是：给每个对象添加一个隐藏成员，隐藏成员中保存了一个指向函数地址数组的指针。这种数组称为虚函数表。
	使用虚函数时，在内存和执行速度方面有一定的成本，包括：
	-每个对象都将增大，增大量为存储地址的空间。
	-对于每个类，编译器都创建一个虚函数地址表（数组）
	-对于每个函数调用，都需要执行一项额外的操作，即到表中查找地址。

三、智能指针
1.含义
    智能指针是行为类似于指针的类对象，但这种对象还有其他功能。
    智能指针主要为了解决new的指针忘了delete的情况。它通过自身的析构函数，在指针过期时释放动态内存。
2.三个智能指针模板
    auto_ptr(C++98 被c++11摒弃）	unique_prt,shared_ptr(c++11)
3.创建
头文件:<memory>
using namespace std;
    auto_ptr<double> pd(new double);
    unique_ptr<double> pdu(new double);
    shared_ptr<string> pss(new string);
4.转型
    shared_ptr<double> pd;
    double *p_reg = new double;
    pd = p_reg;		//not allowed(implicit conversion)
    pd = shared_ptr<double>(p_reg);	//allowed(explicit conversion)
5.区别
    一般指针会存在一个问题，即如果两个指针指向同一个对象，则会析构两次从而出错，解决方案有三：
    （1）定义赋值运算符，使之执行深复制。即一个对象是另一个对象的副本，即不同对象。
    （2）建立所有权概念，即对于特定对象，只能有一个智能指针拥有它。可以通过赋值操作转让所有权。(auto_ptr，unique_ptr，后者编译检查更严格)
    （3）创建智能更高的指针，跟踪引用特定对象的智能指针数，即引用计数(shared_ptr)

   

