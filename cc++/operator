运算符
1.++ --
++a：先计算，再返回
a++：先返回，再计算
如a = 1;
cout << ++a;	//输出2，a==2；
cout << a++;	//输出1，a==2；
---
由于++后缀是创建副本后操作，效率比前缀稍慢
---
int arr[5] = {1,2,3,4,5};
int* pt = arr;
cout << *pt++;	//pt指向arr[1]，输出arr[0]=1
cout << *++pt;  //pt指向arr[2],输出arr[2]=3
cout << (*pt)++;//pt指向arr[2]，输出arr[2]=3,操作后arr[2]=4
cout << ++*pt;	//pt指向arr[2]，输出arr[2]=5

2.逗号运算符
作用：将两个语句合成一个语句
如：for(j=0,i=10;j<i;--i,++j){}
int i,j不是

3.： foreach(c++ 11)
double prices[5] = {1.1,2.2,3.3,4.4,5.5};
for(double x:prices)
	cout << x << std::endl;
for(double &x:prices)
	cout << x << " ";

4.位操作符
--移位操作符
左移：<<
    将一个二进制位的操作数按指定移动的位数向左移位，移出位被丢弃，右边的空位一律补0。
    3 << 2，则是将数字3左移2位，对于char，0000 0011-> 0000 1100
带符号右移：>>
    按二进制形式把所有的数字向右移动对应位移位数，低位移出(舍弃)，高位的空位补符号位，即正数补零，负数补1。
    11 >> 2，则是将数字11右移2位,对于char，0000 1011->0000 0010
无符号友移：>>>
    按二进制形式把所有的数字向右移动对应位数，低位移出(舍弃)，高位的空位补零
--按位操作符
按位与：&
按位或：|
按位异或：^
按位取反：~
