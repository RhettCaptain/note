1.定义全局变量,常量
extern：.h中extern char g_str[]  // 声明全局变量g_str
			.cpp中char g_str[] = " 123456"   // 定义全局变量g_str
static：static修饰的全局变量声明与定义同时进行，
				static修饰全局变量的作用域只能是本身的编译单元，也就是说它的“全局”只对本编译单元有效
				extern和static不能同时修饰一个变量；
				如.h中static char g_str[] = " 123456"   
const:const修饰的全局常量据有跟static相同的特性，即它们只能作用于本编译模块中，
			但是const可以与extern连用来声明该常量可以作用于其他编译模块中
			const的常量不可更改

2.获取数组长度
	sizeof((x)) / sizeof(x[0])

3.参数传递
	（1）值传递
		实际上是在函数内部创建了形参的副本，不改变形参的实际值。
	（2）引用传递
			操作的是形参地址上的值，只不过起了个别名，可以改变形参的实际值。
	（3）指针传递
			函数内部要对指针指向的对象进行操作才会改变形参，如
			void test(int *argc,char **args){
					*argc = 1;					//要对指向的对象赋值。
					*args = "abc";
				//char *tmp = *(args+1);  如果不行，不行加上这句试试
					*tmp = "def";
			}
			int main(int *argc,char **args){
				int a = 2;
				char **str = (char**)malloc(10);	//需要分配内存空间
				test(&a,str);
				cout << a << endl;	//输出1
				cout << *(str+1) <<endl;	//输出def
			}
			

4.虚函数与纯虚函数区别
虚函数为了重载和多态的需要，在基类中是有定义的，即便定义是空，所以子类中可以重写也可以不写基类中的此函数！
纯虚函数在基类中是没有定义的，必须在子类中加以实现，很像java中的接口函数！
（1）类里声明为虚函数的话,这个函数是实现的，哪怕是空实现，它的作用就是为了能让这个函数在它的子类里面可以被重载，
这样的话，这样编译器就可以使用后期绑定来达到多态了
纯虚函数只是一个接口，是个函数的声明而已，它要留到子类里去实现。
（2）虚函数在子类里面也可以不重载的；但纯虚必须在子类去实现，这就像Java的接口一样。
通常我们把很多函数加上virtual，是一个好的习惯，虽然牺牲了一些性能，但是增加了面向对象的多态性，
因为你很难预料到父类里面的这个函数不在子类里面不去修改它的实现
（3）虚函数的类用于“实作继承”，继承接口的同时也继承了父类的实现。当然我们也可以完成自己的实现。
纯虚函数的类用于“介面继承”，主要用于通信协议方面。关注的是接口的统一性，实现由子类完成。一般来说，介面类中只有纯虚函数的。
（4）带纯虚函数的类叫虚基类，这种基类不能直接生成对象，而只有被继承，并重写其虚函数后，才能使用。这样的类也叫抽象类。
虚函数是为了继承接口和默认行为
纯虚函数只是继承接口，行为必须重新定义
---
虚函数
引入原因：为了方便使用多态特性，我们常常需要在基类中定义虚函数。
---纯虚函数
引入原因：
1、同“虚函数”；
2、在很多情况下，基类本身生成对象是不合情理的。例如，动物作为一个基类可以派生出老虎、孔雀等子类，但动物本身生成对象明显不合常理。
