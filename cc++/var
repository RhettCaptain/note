变量类型
1.整形 
short	至少16位
int	至少与short一样长
long	至少32位，且至少与int一样长
long long 至少64位，且至少与long一样长
以上都是符号型
char 见7


2.sizeof()
size_t sizeof(int);	//返回字节数

3*.<climits>
包含了类型的最大最小值，如CHAR_BIT,CHAR_MAX,CHAR_MIN

4.无符号
unsigned int a;

5.进制
0<1~7>开头：八进制
0x开头：十六进制
其他：十进制
-------------------
cout默认输出十进制，如0xa 输出10；
可以修改控制符dec,hex,oct，如
cout << hex;	//作用效果直到下一次修改
cout << 10;  	//输出a

6.常量类型
默认存储为int，除非太大
C中使用#define定义符号常量，C++中请用const

7.char
存储数值（ASCII码），只是cout输出char型是会把这个数值转换为相应字符，内存中仍是数字。
除了cout<<还可以用cout.put(ch)函数

8.转义序列
换行符 \n;	水平制表符\t;	垂直制表符\v;	退格\b;	回车\r;
振铃\a;		反斜杠\\;	问号\?;		单引号\';	双引号\".		

9.bool
c++支持，c不支持
true是1，false是0，任何非零都当做真。

10.浮点型
float	有效位数不少于32位
double	有效位数不少于48位，且不少于float，通常64位
long double	有效位数不少于double
可以从cfloat或float.h中找到限制。
----------------------
通常cout会删除结尾的零，调用cout.setf()将覆盖这种行为。
cout的ostream类有一个成员函数可以控制输出格式。
--------------------
浮点常量
默认double型
1.234f	//float型
2.34F	//float型
2.32E23	//double型
2.33e-2	//double型
1.42l	//long double型
4.2L	//long double型

11.声明与定义
单定义规则：声明可以有多次，定义只能有一次
一个变量是声明，必须同时满足两个条件，否则就是定义：   
(1)声明必须使用extern关键字；
(2)不能给变量赋初值   
所以，下面的是声明: （又称引用声明，不分配存储空间）  
extern   int   a;   
下面的是定义 （又称定义声明，分配空间）  
int   a;   int   a = 0;   extern int a = 0;   
---
单定义规则不意味不能有多个变量的名称相同
（1）不同函数中声明的同名自动变量是彼此独立的
（2）局部变量可以隐藏同名的全局变量，可以通过在前面加::解除隐藏。
---
如果要在多个文件中使用外部变量，只需在一个文件中包含该变量的定义，
但在使用该变量的其他所有文件中，都必须使用关键字extern声明它：
file1.cpp
[extern] int cats = 20;	//extern 可以省略（定义）
extern const int dogs = 2; //对于const必须在声明和定义中都加上extern
[extern] void fun(){}

file2.cpp
extern int cats;	//使用file1.cpp的变量
extern const int dogs;	//使用file1.cpp的变量
extern void fun(); //声明外部函数
cout << cats;


12.5种变量存储方式
存储描述	持续性		作用域		链接性		如何声明
自动		自动		代码块		无		在代码块中
寄存器		自动		代码块		无		在代码块中，使用关键字register
静态、无链接性	静态		代码块		无		在代码块中，使用关键字static
静态、外部链接性 静态		文件		外部		不在任何函数内
静态、内部链接性 静态		文件		内部		不在任何函数内，使用关键字static
持续性：描述了变量的生命周期。
作用域：描述了名称在文件/翻译单元的多大范围内可见。
链接性：描述了名称如何在不同文件/单元间共享。

13.存储说明符和cv-限定符
--存储说明符：
auto;//在c++11中不再是说明符
register;//寄存器变量
static;
extern;
thread_local;//c++11新增的，线程变量
mutable;//即使结构/类变量为const，其某个成员的值也是被修改的。
除了thread_local可与static或extern结合使用外，同一个声明中不能使用多个说明符
--cv-限定符
const;//表明内存被初始化后，程序不能再对它进行修改。c++中const的链接性是内部的，可通过extern覆盖
volatile;//表明即使程序代码没有对内存单元进行修改，其值也可能发生变化。告诉编译器不要进行（假设变量值在两次使用间不会变化）的优化。

14.名字空间
（1）创建
    通过定义一种新的声明区域来创建命名的名称空间。
    namespace Jack{
	double pail;
	void fetch();
	int pal;
	struct Well{...};
    }
    namespace Jill{
    	double bucket(double n){...}
	double fetch;
	namespace fire{		//可以嵌套
		int flame;
	}
    }	
    名字空间可以是全局的，也可以位于另一个名称空间中，但不能位于代码块中。
    因此默认情况下，在名称空间中声明的名称的链接性为外部的（除非它引用了常量）。
    除了用户定义的名称空间，还有一个默认的全局名称空间，全局变量都在全局名称空间中
（2）使用
-using声明：特定的标识符可用
	char fetch;
	using Jack::pail;		//将Jack的pail添加到全局名称空间
	int main()
	{
		using Jill::fetch;	//将Jill的fetch声明添加到main定义的声明区域中。 
					//这里可以用fetch代替Jill::fetch
					//并隐藏全局的fetch
		//double fetch;		//错误，该声明区域已经有一个fetch了
		cin >> fetch;		//读入Jill::fetch
		cin >> ::fetch;		//读入全局的fetch
	}
-using编译：全部名称可用
	using namespace Jack
	一般不允许使用两个using声明同一个名称，这样会存在二义性
（3）建议
-使用在已命名的名称空间中声明的变量，而不是使用外部全局变量。
-使用在已命名的名称空间中声明的变量，而不是使用静态全局变量。
-不要在头文件中使用using编译指令。
-导入名称时，首选使用作用域解析运算符或using声明的方法。
-对于using声明，首选使用作用域设置为局部而不是全局。
    
15.左值（表达式）和右值（表达式）
当一个对象被用做右值的时候，用的是对象的值（内容）
当一个对象被用作左值的时候，用的是对象的身份（在内存中的位置）

16.强制转换
cast-name:static_cast、dynamic_cast、const_cast、reinterpret_cast
(1)static_cast
任何具有明确定义的类型转换，只要不包含底层const，都可以使用static_cast
如：double slope = static_cast<double>(j)/i;
(2)dynamic_cast
支持运行时类型识别
(3)const_cast
只能改变运算对象的底层const
const char* pc;
char *p = const_cast<char*>(pc);	//去掉const性质
(4)reinterpret_cast
通常为运算对象的位模式提供较低层次上的重新解释
