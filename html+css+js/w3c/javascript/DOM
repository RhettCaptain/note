HTML DOM （文档对象模型）
一、简介
1.简介
当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。
HTML DOM 模型被构造为对象的树。
通过 HTML DOM，可访问 JavaScript HTML 文档的所有元素。
通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML。
JavaScript 能够改变页面中的所有 HTML 元素
JavaScript 能够改变页面中的所有 HTML 属性
JavaScript 能够改变页面中的所有 CSS 样式
JavaScript 能够对页面中的所有事件做出反应

2.通过 id 查找 HTML 元素
var x=document.getElementById("intro");

3.通过标签名查找 HTML 元素
var x=document.getElementById("main");
var y=x.getElementsByTagName("p");


二、改变 HTML
1.改变 HTML 输出流――document.write();
document.write(Date());
绝不要使用在文档加载之后使用 document.write()。这会覆盖该文档。

2.改变 HTML 内容――document.getElementById(id).innerHTML=new HTML
document.getElementById("p1").innerHTML="New text!";

3.改变 HTML 属性――document.getElementById(id).attribute=new value
document.getElementById("image").src="landscape.jpg";

三、改变 HTML 样式
document.getElementById(id).style.property=new style
document.getElementById("p2").style.color="blue";

四、DOM 事件
1.语法
onclick=JavaScript
（1）<h1 onclick="this.innerHTML='谢谢!'">请点击该文本</h1>
（2）<script>
function changetext(id)
{
id.innerHTML="谢谢!";
}
</script>
<h1 onclick="changetext(this)">请点击该文本</h1>
（3）<script>
document.getElementById("myBtn").onclick=function(){displayDate()};
</script>

2.事件
（1）onload 和 onunload 事件
onload 和 onunload 事件会在用户进入或离开页面时被触发。
<body onload="checkCookies()">
（2）onchange 事件
onchange 事件常结合对输入字段的验证来使用。当用户改变输入字段的内容时，会调用 upperCase() 函数。
<input type="text" id="fname" onchange="upperCase()">
（3）onmouseover 和 onmouseout 事件
onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数
（4）onmousedown、onmouseup 以及 onclick 事件
onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。
首先当点击鼠标按钮时，会触发 onmousedown 事件，
当释放鼠标按钮时，会触发 onmouseup 事件，
最后，当完成鼠标点击时，会触发 onclick 事件。

五、节点/元素
1.创建新的 HTML 元素
如需向 HTML DOM 添加新元素，您必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。
<script>
var para=document.createElement("p");
var node=document.createTextNode("这是新段落。");
para.appendChild(node);
var element=document.getElementById("div1");
element.appendChild(para);
</script>
2.删除已有的 HTML 元素
如需删除 HTML 元素，您必须首先获得该元素的父元素：
<script>
var parent=document.getElementById("div1");
var child=document.getElementById("p1");
parent.removeChild(child);
</script>