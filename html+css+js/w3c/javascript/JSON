JSON
一、简介
1.什么是JSON
JavaScript 对象表示法（JavaScript Object Notation）。
JSON 是存储和交换文本信息的语法。类似 XML。
JSON 比 XML 更小、更快，更易解析。

2.JSON - 转换为 JavaScript 对象
JSON 文本格式在语法上与创建 JavaScript 对象的代码相同。
由于这种相似性，无需解析器，
JavaScript 程序能够使用内建的 eval() 函数，用 JSON 数据来生成原生的 JS

3.hello world
<script type="text/javascript">
var JSONObject= {
"name":"Bill Gates",
"street":"Fifth Avenue New York 666",
"age":56,
"phone":"555 1234567"};
document.getElementById("jname").innerHTML=JSONObject.name
document.getElementById("jage").innerHTML=JSONObject.age
document.getElementById("jstreet").innerHTML=JSONObject.street
document.getElementById("jphone").innerHTML=JSONObject.phone
</script>

二、语法
1.JSON 语法规则
JSON 语法是 JavaScript 对象表示法语法的子集。
数据在名称/值对中
数据由逗号分隔
花括号保存对象
方括号保存数组

2.JSON 名称/值对
名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：
"firstName" : "John"
等价于这条 JavaScript 语句：
firstName = "John"

3.JSON 值
JSON 值可以是：
数字（整数或浮点数）
字符串（在双引号中）
逻辑值（true 或 false）
数组（在方括号中）
对象（在花括号中）
null

4.JSON 对象
JSON 对象在花括号中书写：
{ "firstName":"John" , "lastName":"Doe" }
这一点也容易理解，与这条 JavaScript 语句等价：
firstName = "John"
lastName = "Doe"

5.JSON 数组
JSON 数组在方括号中书写：
{
"employees": [
{ "firstName":"John" , "lastName":"Doe" },
{ "firstName":"Anna" , "lastName":"Smith" },
{ "firstName":"Peter" , "lastName":"Jones" }
]
}

6.JSON 使用 JavaScript 语法
var employees = [
{ "firstName":"Bill" , "lastName":"Gates" },
{ "firstName":"George" , "lastName":"Bush" },
{ "firstName":"Thomas" , "lastName": "Carter" }
];
可以像这样访问 JavaScript 对象数组中的第一项：
employees[0].lastName;
返回的内容是：
Gates
可以像这样修改数据：
employees[0].lastName = "Jobs";

三、使用
1.来自字符串的对象
创建包含 JSON 语法的 JavaScript 字符串：

var txt = '{ "employees" : [' +
'{ "firstName":"Bill" , "lastName":"Gates" },' +
'{ "firstName":"George" , "lastName":"Bush" },' +
'{ "firstName":"Thomas" , "lastName":"Carter" } ]}';
JavaScript 函数 eval() 可用于将 JSON 文本转换为 JavaScript 对象
eval() 函数使用的是 JavaScript 编译器，可解析 JSON 文本，然后生成 JavaScript 对象。必须把文本包围在括号中，这样才能避免语法错误：
var obj = eval ("(" + txt + ")");

2.使用JQUERY ajax传输数据
（1）获取$.get() 方法
$.get() 方法通过 HTTP GET 请求从服务器上请求数据。
$.get(URL,callback);
必需的 URL 参数规定您希望请求的 URL。
可选的 callback 参数是请求成功后所执行的函数名。
$.get("demo_test.asp",function(data,status){
    alert("Data: " + data + "\nStatus: " + status);
  });
  提示：这个 ASP 文件 ("demo_test.asp") 类似这样：
<%
response.write("This is some text from an external ASP file.")
%>
spring中
+ @ResponseBody
返回对象没问题

（2）$.post() 方法
$.post() 方法通过 HTTP POST 请求从服务器上请求数据。
$.post(URL,data,callback);
必需的 URL 参数规定您希望请求的 URL。
可选的 data 参数规定连同请求发送的数据。
可选的 callback 参数是请求成功后所执行的函数名。
 $.post("demo_test_post.asp",
  {
    name:"Donald Duck",
    city:"Duckburg"
  },function(data,status){
    alert("Data: " + data + "\nStatus: " + status);
  });
 提示：这个 ASP 文件 ("demo_test_post.asp") 类似这样：

<%
dim fname,city
fname=Request.Form("name")
city=Request.Form("city")
Response.Write("Dear " & fname & ". ")
Response.Write("Hope you live well in " & city & ".")
%>
注意两个问题，一个可能被Struts等拦截，需要输出json格式。
一个是对象传输做序列话JSON.stringify
见下

（3）$.ajax上面两种方法的底层
	var data = {
         name:name,
         sno:sno
     }//与对象类匹配
    $.ajax({
        type:"POST",
        url:"/he ",
        data: JSON.stringify(data),//必要
        dataType:"json",
        contentType:"application/json",
        async: false,
        cache:false,
        success:function(data){
        }
    });
spring的控制器
+ @RequestBody和@ResponseBody