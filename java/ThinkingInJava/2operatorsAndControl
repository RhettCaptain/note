1.赋值与引用别名问题
	基本类型存储了实际的数值，而并非指向一个对象的引用，所以在为其赋值的时候，是直接将一个地方的内容复制到了另一个地方。如基本类型a=b，b的内容复制给a，修改a，b不受影响。
	对一个对象进行操作时，我们真正操作的是对对象的引用，所以将一个对象赋值给另一个对象，实际是将引用从一个地方复制到了另一个地方，如c=d，则c和d都指向同一个对象。
	这种现象叫做别名现象，通过直接操作域进行赋值可以避免，但不建议这么用。
	数组有别名现象，如数组a=b,对a[i]操作会影响到b，因为此时a，b指向同一个对象。但对引用操作，如a=c不会影响b.
	Integer等无别名现象。
	数组和对象作为函数形参时，也存在别名现象。如数组a，在函数内改变引用a=b在函数外是没有作用的，但改变a[0]是有影响的。形参可以看作实参的一个别名。

2.==与equals（）
equals()默认比较引用，用于比较对象，不适用基本类型。
Integer n1 =new Integer(1);
Integer n2 =new Integer(1);
Value v1 = new Value();
Value v2 = new Value();
n1 == n2 false
n1.equals(n2)  true
v1.equals(v2) false

3.按位操作符
（1)^异或
（2)Integer.to.BinaryString(n),将n转化为二进制字符串
（3)<<左移位，低位补0
（4)>>有符号右移位，左边符号扩展，即正数补0,负数补1
（5)>>>无符号右移位，高位补0
（6)补码：正数的补码等于原码，负数补码等于原码（符号为1,其余位为绝对值，如-7:10000111)符号位不变,其余位取反+1（补码11111001)，负数用其补码表示

4.for与foreach
(1)for中可以用逗号操作符，如
for(int i=1,j=i+10;i<5;i++,j=i*2){}
(2)foreach，如
int[] a={1,2,4};
for(int x:a){}

