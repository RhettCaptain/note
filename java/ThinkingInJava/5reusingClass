一、复用类
1.复用方式：
	（1)组合：在新的类中产生现有类的对象。
	（2)继承：按照现有类的类型来创建新类。
	（3)代理：将一个成员对象置于所要构造的类中，但同时在新类中暴露该成员对象的所有方法。
	除非已明确指出要从其他类中继承，否则就是隐式的从java的标准根类Object进行继承
	is-a（是一个）的关系是用继承来表达的，has-a（有一个）是用组合来表达的。
	如果需要向上转型，则继承是必要的
2.final
	final数据表明一个永不改变的编译时常量，一个在运行时被初始化的值，而你不希望它被改变。
	final方法和类类似。
	
二、多态
1.向上转型（上塑）
	Basketball类继承自Ball类，则Basketball也是Ball，必定拥有Ball的基本方法。因此Basketball对象可以向上转型为Ball类型的参数。
2.方法调用绑定
	将一个方法调用与一个方法主体关联起来被称为绑定。在程序执行前进行绑定叫做的前期绑定。在运行时根据对象的类型进行绑定叫做后期绑定，也叫做动态绑定。
	java中除了static方法和final方法（private方法属于final方法）外，都是后期绑定。
3.多态
	Baseketball和Football类都继承子Ball类，是Ball就有kick（）方法。因此使用Ball对象作为参数，接受Basketball等具体ball的对象向上转型，在后期绑定kich的具体实现，这样kich就有多种形态，叫做多态。
4.协变返回类型
	导出类中的被覆盖方法可以返回基类方法的返回类型的某种导出类型。如：
	A extends B
	C extends D
	D中B method(),C中A method();
5.向下转型
	需要确保类型正确。

三、接口
1.抽象方法
	仅有申明，没有方法体
	abstract void f();
2.抽象类
	包含抽象方法的类叫做抽象类。如果一个类包含一个或多个抽象方法，该类必须被限定为抽象的。
	如果从一个抽象类继承，并想创建新类的对象，那么就必须为基类中的所有抽象方法提供方法定义。如果不这样做，那么导出类便也是抽象类，且编译器将会强制我们用abstract关键字来限定这个类。
3.接口
	interface这个关键字产生一个完全抽象的类，只能有public方法声明和static和final域（长用来创建常量组）。
	创建一个接口，需要用interface关键词代替class关键字。要实现或遵循某个接口，需要使用implements
4.多重继承
	因为interface允许人们通过创建一个能够向上转型为多种基类的类型，来实现某种类似多重继变种的特性。
	如interface Hero extends Man implements CanRun, CanFly, CanSwim{}

四、内部类
1.可以将一个类的定义放在另一个类的定义内部，这就是内部类。
2.内部类可以访问其外围对象的所有对象
3.如果需要生存对外部类对象的引用，可以使用外部类的名字后面紧跟.this，如：
public class DoThis
{
	public class Inner
	{
		public DoThis outer()
		{
			return DoThis.this;
		}
	}
}
	如果要告诉某些其他对象，去创建其某个内部类的对象，需要使用.new,如：
public class DoThis
{
	public class Inner{}
	public static void main(String[] args)
	{
		DoThis d = new DoThis();
		DoThis.Inner di = d.new Inner();
	}
}
4.匿名内部类
public class DoThis
{
	public DoThat inner()	
	{
		return new DoThat()
		{
			public int value()
			{
				return 10;
			}
		}
	}
}
inner方法创建了一个继承自DoThat的没有名字的类，并将其结果向上转型作为返回值。
实例：
frm.addWindowListener(new WindowEventAdaptor(){
	public void windowClosing(WindowEvent e)
	{
		System.exit(0);
	}
})
5.嵌套类
	如果不需要内部类对象与其外围类对象之间有联系，那么可以将内部类申明为static，称为嵌套类。
	创建嵌套类不再需要外围类的对象。但不能从嵌套类的对象中访问非静态的外围对象。
6.闭包与回调
	闭包是一个可调用的对象，它记录了一些信息，这些信息来自于创建它的作用域。
	通过回调，对象能够携带一些信息，这些信息允许它在稍后的某个时刻调用初始的对象。
	通过内部类提供闭包的功能是优良的解决方案，它比指针更灵活、更安全。
	例子：
	interface Incrementable
	{
		void increment();
	}
	class Callee
	{
		pulic void increment(){//...}	//与接口中无关
		//闭包
		private class Closure implements Incrementable
		{
			public void increment()
			{
				Callee.this.increment();
			}
		}
		Incrementable getCallbackReference()
		{
			return new Closure();
		}
	}
	class Caller
	{
		private Incrementable callbackReference;
		Caller(Incrementable cbh)
		{
			callbackReference = cbh;
		}
		void go()
		{
			callbackReference.increment();
		}
	}
	public class Callbacks
	{
		public static void main(String[] args)
		{
			Callee ce = new Callee();
			Caller cr = new Caller(ce.getCallbackReference());
			cr.go();
		}
	}
	Callee已经有一个与接口无关的increment()方法，如果要覆盖接口的increment()方法，只能使用内部类独立实现Incrementable。
	内部类Closure实现了Incrementable，以提供一个返回Callee的钩子(hook)，得到此Incrementable的引用，能且只能调用increment()
7.应用程序框架与控制框架
	应用程序框架是被设计用以解决某类特定问题的一个或一组类。要运用某个应用程序框架，通常是继承一个或多个类，并覆盖某些方法。
	控制框架是一类特殊的应用程序框架，它用来解决响应事件的需求。主要用来响应事件的系统被称为事件驱动系统。

