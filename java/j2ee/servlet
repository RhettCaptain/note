零、基础
	1.Http
		hyper text transafer protocal	超文本传输协议
	2.机制：请求/响应 机制 request/response
		httpServletRequest/httpServletResponse
一、Web工程结构
1.简介
	B/S结构程序和C/S结构程序，无论是在功能上还是在结构上都有着本质的区别。
	B/S结构程序，即Brower（浏览器）/Server（服务器）结构程序
	程序的结构以不同的目录来组织和管理，程序只需要部署（拷贝）到支持该Web程序的服务器中，即可运行，无需安装。
	
2.Web应用程序的思想
	Servlets,JSP页面，HTML文件，工具类，JavaBean，标签库等，被放到一个不同层次结构的目录里。
	在web应用程序中，使用有公共的前缀的URL来访问Web应用程序上下文（WebContext）
	Web应用程序的很多行为，都是有部署描述符控制的（web.xml)
	
3.Web应用程序的目的
	（1）组织
			通过不同层次的目录结构来将文件组织在一起,HTML文件，JSP,servlets，beans，图片等
	（2）可携带
			所有的兼容服务器都支持Web应用程序
			通过移动一个文件，重新部署到新的Web服务器中
	（3）分离性
			每一个Web应用程序都有自己的：
			Servlet上下文（ServletContext）
			类加载器（Class loader）
			会话（Sessions)
			URL前缀（URL prefix）
			目录结构（Directory structure）
			
4.Web工程结构
	（1）JSP和常规Web内容（HTML,样式表，图片，等）
	（2) Servlets
			放置在WEB-INF/classes目录下（匹配的包名称）
	（3）没有打包的JavaBean和工具类
			放置在WEB-INF/classes目录下（匹配的包名称）
	（4）JAR文件
			放置在WEB-INF/lib目录下
	（5）web.xml
			放置在WEB-INF下面
	（6）标签库描述文件（TLD文件）
			放置在WEB-INF下或子目录下
	（7）WEB-INF下的文件不能由客户端直接访问
			可以使用RequestDispatcher转发到WEB-INF下
	（8）demo
	webAppDirectory
			|--SomeFile.html
			|--SomeFile.jsp
			|--images,Style..
			|--WEB-INF--------web.xml
			|			|---classes-----SomeFile.class
			|			|---lib---------SomeFile.jar
			|			|---tids--------SomeFile.tid
			|--META-INF-------MANIFEST.MF
5.web.xml文件
	(1)作用
		控制web应用程序的行为
			web工程启动时，首先读取该文件的配置信息，如果配置信息有误，web工程将启动失败
	（2）功能
			-声明
				Servlet，filter，listner
			-自定义URLs
				servlet，filter
			-初始化参数
				Servlets，JSP Pages等
			-预加载/欢迎/错误页面	
6.实例

二、Servlet简介
1.为什么需要动态创建Web页面
	（1）Web页面基于用户提交的数据
		例如搜索引擎的结果和在线商店的订单确认信息
	（2）Web页面的数据频繁改变
		例如天气预报和新闻头条
	（3）页面信息来自数据库
		例如电子商务网站的每日销售商品的价格清单
2.Servlet的功能
	（1）读取客户端发来的显示信息（表单数据）
	（2）读取客户端发来的隐式信息（请求头信息）
	（3）生成相应结果
	（4）发送显示信息给客户端(HTML)
	（5）发送隐式数据到客户端（状态码和响应头信息）
3.Servlet相对“传统“CGI的优势
	（1）效率高
			线程取代操作系统的进程
	（2）方便
			大量高级工具类
	（3）功能强大
			共享数据，数据持久性
	（4）轻便
			可以运行在所有的操作系统上
	（5）廉价
			有大量的免费或价格较低的服务器
	（6）安全
			没有缓存溢出问题
	（7）主流  
4.Servlet的相关类和接口
		Servlet-		-ServletConfig
						|		|
					GenericServlet
							|
					HttpServlet
							|
						MyServlet
	（1）包结构
			javax.servlet
			javax.servlet.http
	（2）Servlet接口
	（3）ServletConfig
	（4）ServletContext
	（5）ServletRequest
	（6）ServletResponse
	（7）GenericServlet
	（8）HttpServlet
	（9）HttpServletRequest
	（10）HttpServletResponse
	（11）HttpSession
5.Serlet实例
	（1）创建一个servlet类
		编写一个类，如HelloWorldServlet继承HttpServlet
		覆盖HttpServlet中的doGet等方法，如：
		public void init() throws ServletException
	  {
		  System.out.println("ffffffffffffuck@");
	  }
	  public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
	  {
	      // 设置响应内容类型
	      response.setContentType("text/html");
	      // 实际的逻辑是在这里
	      PrintWriter out = response.getWriter();
	      out.println("<h1>" + "hello" + "</h1>");
	  }
	（2）编写web.xml放在WEB-INF下
			通过URL/提交表单/超链接/JS脚本调用servlet，如
			<web-app>      
			    <servlet>
			        <servlet-name>HelloWorld</servlet-name>
			        <servlet-class>pkg.serv</servlet-class>
			    </servlet>
			    <servlet-mapping>
			        <servlet-name>HelloWorld</servlet-name>
			        <url-pattern>/fuck</url-pattern>			
			    </servlet-mapping>
			</web-app>  
			这样访问localhost:8888/fuck就会找叫做Helloworld的servlet，并执行其对应的方法pkg包下的serv.class
		
三、Servlet基础
1.提交表单的方法
	（1）get
			将请求参数显示在URL中
			调用Servlet的doGet方法
	（2）post
			不在URL中显示请求参数
			调用Servlet的doPost方法
2.Servlet生命周期
	（1）加载实例化Servlet
			创建一个Servlet实例
	（2）调用init方法
			仅被调用一次
	（3）调用service方法（doGet或doPost）
			被调用多次（每次请求调用）
	（4）调用destory方法
			调用一次（销毁Servlet）
3.使用Servlet输出HTML页面(现多用jsp实现）
	（1）获得输出流
			PrintWriter out = response.getWrtier();
	（2）输出HTML页面
			response.setContentType("text/html");
			PrintWriter out = response.getWriter();
			out.println("<HTML>");
			out.println("fuck");
			out.println("</HTML>");
			out.flush();
			out.close();
4.获得Servlet初始化参数
	（1）在web.xml配置
			如<init-param>
					<param-name>username</param-name>
					<param-value>amaker</param-value>
				<init-param>
	（2）在程序中获取获得
			如String user = this.getInitParameter("username");
	（3）局部变量需先获取上下文
			
5.页面导航
	（1）请求重定向(不共享request数据）
			response.sendRedirect("url");
	（2）请求转发（跳转）
			request.getRequestDispatcher("url").forward(request,response)
	（3）请求包含（内容包含）
			request.getRequestDispatcher("url").include(request,response);
			
四、ServletForm表单处理
1.Form表单简介
	表单是web程序和用户交互的主要途径之一，例如：搜索引擎、用户登录、注册等操作
	常用表单元素：input（text，password，radio，checkbox，hidden，file，button，reset，submit）
	，select（option），textarea
2.创建并提交表单
	demo：
	<form name="f1" action="/servlet/LoginServlet" method="post">
		<table border="0">
		<tr>
			<td>用户名称</td>
			<td><input type="text" name="user"></td>
		</tr>
		<tr>
			<td>用户密码</td>
			<td><input type="password" name="password"></td>
		</tr>
		<tr>
			<td colspan="2" align="center"><input type="submit" value="登录"></td>
		</tr>
		</table>
	</form>
3.使用Servlet处理表单
	读取单个请求参数
		String user = request.getParameter("user");
	读取多个表单
		String[] hobby = request.getParameterValues("hobby");
	读取所有参数名称
		Enumeration names = request.getParameterNames();

五、Servlet请求头信息
1.典型的请求头信息
	GET /servlet/Search?keywords=servlets+jsp HTTP/1.1		//请求，url，协议版本
	Accept:image/gif,image/jpg,*/*								//可接受的类型
	Accept-Encoding:gzip													//可接受的编码
	Connection:Keep-Alive													//是否保持永久连接
	Cookie:userID=id456578												//Cookie（客户端与服务器永久保持的一些信息）
	Host:www.somebookstore.com										//主机
	Referer:http://www.sombookstore.com/findbooks.html				//当前请求的URL
	User-Agent:Mozilla/4.0(compatible;MSIE 6.0;Windows NT 5.0)	//浏览器类型
2.读取HTTP请求头
	使用HttpServletRequest中的方法
	（1）一般方法：
			-getHeader
			-getHeaders
			-getHeaderNames
	（2）专门方法
			-getCookies
			-getAuthType
			-getRemoteUser
			-getContentLength
			-getContentType
			-getDateHeader
			-getIntHeader
	（3）相关信息
			-getMethod
			-getRequestURL
			-getQueryString
			-getProtocol
3.使用表格显示所有请求头信息
		先用getParameterNames()读取所有参数名称，
		再getHeader(“名称”)读取内容打印
4.理解各种请求头的含义
	见1注释
5.区分不同的浏览器类型
	demo:
		String b = request.getHeader("User-Agent");
		if(b!=null && b.indexOf("MSIE")!=-1{
			out.println("IE浏览器");
		}
		else{
			out.println("其他浏览器");
		}
	
六、Servlet响应头信息
1.HTTP响应的格式
					请求																响应
	GET /servlet/someName HTTP/1.1				HTTP/1.1 200 OK
	Host:...															Content-Type:text/html
	Header2:...														Header2:...
	...																		...
	HeaderN:...														HeaderN:...
	(Blank Line)													(Blank Line)	//前面显式，后面隐式
																				<!DOCTYPE ...>
																				<HTML>
																				（主体内容）。。。
2.设置响应报头
	（1）设置任意响应头
			public void setHeader(String headerName, String headerValue)		//设定任意的报头
			public void setaDateHeader(String name,long millisecs)		//将自1970年以来的毫秒数转换成GMT格式日期字符串
			public void setIntHeader(String name,int headerValue)		//可以省去在调用setHeader之前将int转换成字符串的麻烦
			addHeader,addDateHeader,addIntHeader		//增加新报头，而非替换已有的报头
	（2）普通响应报头的设置
			setContentType
					设定Content-Type报头
					Servlet几乎总会用到这个报头
					参加常见MIME类型的表格
			setContentLength
					设定Content-Length报头
					用于持续性HTTP连接
					参加Connection请求报头
			addCookie
					为Set-Cookie报头增加一个值
					参加介绍cookie的部分
			sendRedirect
					设定Location报头（以及改变状态代码）
3.常见MIME类型
		application/msword		application/pdf				application/zip
		audio/x-wav		text/css		text/xml
		image/gif		image/jpeg		image/png			video/mpeg等
4.常见HTTP 1.1响应报头
		Cache-Control（1.1）和Pragma（1.0）		//no-cache值阻止浏览器缓存页面
		Content-Disposition，Content-Encoding，Content-Length，Content-Type
		Expires			//何时过期
		Last-Modified		//最后改动时间
		Location
		Refresh
		Set-Cookie
		WWW-Authenticate
5.demo
（1）构建Excel电子表格
		response.setContentType("application/vnd.ms-excel");
		PrintWriter out = response.getWriter();
		out.println("\tQ1\tQ2\tTotal");
		out.println("Apples\t78\t62\t=SUM(B2:C2)");
（2）动态生成JPEG图像
		response.setContentType("image/jpeg");
		InputStream in = this.getClass().getClassLoader().getResourceAsStream("girl.jpg");
		int size = in.available();
		byte[] buffer = new byte[size];
		in.read(buffer);
		OutputStream out = response.getOutputStream();
		out.write(buffer);
（3）定时刷新页面
		response.setHeader("refresh","1");		//1s刷新一次
		Date date = new Date():
		out println(date.toLocaleString());