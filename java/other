1.随机数
（1)Math.random()产生0-1的随机数
（2)Random ra = new Random();
ra.nextInt(n),ra.nextDouble(n)...产生0-n随机数。
ra.nextInt();产生随机整形数

2.String类有toCharArray方法

3.空数组
	int[] a;
	int[] b={1,2,3};
//	a[0] = 1;	//这样不对，因为a只是一个引用，没有实际对象空间
	a = b;	//但这样是可以的
	
4.eclipse引用自己的类库
	工程属性->buildBath->添加jar或文件夹，文件夹的话要选到bin这一级。
	导入直接import 包,静态导入方法import static 包.方法

5.throw and throws
	throw可以在方法中抛出异常，这后面的语句不执行，但需要添加throws或try/catch。如
	 public Object deleteFirst() throws Exception{  
        	if(first == null)  
            		throw new Exception("empty!"); 
	}
参考：https://zhidao.baidu.com/question/95292504.html

6.成员与内部类的继承
	成员和内部类都能够随外部类得到继承，但和父类中的成员和内部类都不是一样的东西，
	如A类中有c，B继承A也有c，但是A.c，B中重写c，则B中方法调用的c是B.c，B中可以使用A中继承来的方法a来操作A.c，但不能操作B.c。
	？？能否通过转型完成方法a对B.c的操作，即用父类方法调用处理子类成员？？
	？？如何在B中重写方法a的时候，实现复用a并改进？？
	参考问题：红黑树继承二叉搜索树

7.获取当前日期/时间
	使用Calendar类
	（1）demo1 获得当前分钟
	Calender cal = Calendar.getInstance();
	int minute = cal.get(Calendar.MINUTE);
	（2）获取文件修改时间
	long time = f.lastModified();
	cal.setTimeinMillis(time);
	String timeStr = cal.getTime().toString();
	
8.单元测试
	选中类，右击新建other-JUnit --> 勾选setUp()和tearDown() --> next勾选需要测试的方法。--> 编写测试代码 --> 右击测试文件，Run as JUint
	
9.socket掉线与程序计时
	客户端Socket掉线时，服务器端是无法检测到的。可以通过callable和Future实现延时断开
	demo：
		final ExecutorService exec = Executors.newFixedThreadPool(1);  
        Callable<String> call = new Callable<String>() {  
            public String call() throws Exception {  
                //开始执行耗时操作  
                Thread.sleep(1000 * 5);  
                return "线程执行完成.";  
            }  
        };   
        try {  
            Future<String> future = exec.submit(call);  
            String obj = future.get(1000 * 1, TimeUnit.MILLISECONDS); //任务处理超时时间设为 1 秒  
            System.out.println("任务成功返回:" + obj);  
        } catch (TimeoutException ex) {  
            System.out.println("处理超时啦....");  
            ex.printStackTrace();  
        }catch (Exception e) {  
            System.out.println("处理失败.");  
            e.printStackTrace();  
        }  
        // 关闭线程池  
        exec.shutdown(); 
        
10.Jsp遍历后台传过来的List
(1)使用jstl标签 （可以和自定义标签配合使用）
	首先引用jstl标签
	<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>  
	然后使用foreach标签
	<c:forEach items="${list}" var="user" varStatus="vs">  
		<td align = "center">${user.PId}</td>  
	</c:forEach>  
(2)使用jsp内嵌java代码遍历List (如果是大数据量，不应使用此方法)
	request.setAttribute()
	<% List<User> s = (List)(request.getAttribute("userAll")); %>
(3)使用Struts标签

11.单例模式
public class SpendPanel {
    public static SpendPanel instance = new SpendPanel();
}

SpendPanel p=SpendPanel.instance;

12.节流
如果有用户闲得无聊，在那拼命的点击下一张的按钮，那么每一次点击都会触发movePicture函数，这个时候，你就会看到图片在那乱跳。
所以，为了避免这种用户的操作，我们需要用js来做一个节流，
思路为：
每当我触发按钮的点击事件，就把当前的定时器timer清零，然后又马上给他设置定时内容，比如500毫秒后才进行移动操作。
var timer = null;
rightBtn.on('click',function(){
    clearTimeout(timer); //定时器清零
    timer = setTimeout(function(){
        index ++;
        movePicture();
    },500);
    
});

13.属性文件
InputStream inputStream =  TestProperties.class.getClassLoader().getResourceAsStream("jdbc.properties");
Properties p = new Properties();
try {
    p.load(inputStream);
    System.out.println(p);
    System.out.println(p.getProperty("db.username"));
} catch (IOException e) {
    e.printStackTrace();
}