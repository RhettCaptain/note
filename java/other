1.随机数
（1)Math.random()产生0-1的随机数
（2)Random ra = new Random();
ra.nextInt(n),ra.nextDouble(n)...产生0-n随机数。
ra.nextInt();产生随机整形数

2.String类有toCharArray方法

3.空数组
	int[] a;
	int[] b={1,2,3};
//	a[0] = 1;	//这样不对，因为a只是一个引用，没有实际对象空间
	a = b;	//但这样是可以的
	
4.eclipse引用自己的类库
	工程属性->buildBath->添加jar或文件夹，文件夹的话要选到bin这一级。
	导入直接import 包,静态导入方法import static 包.方法

5.throw and throws
	throw可以在方法中抛出异常，这后面的语句不执行，但需要添加throws或try/catch。如
	 public Object deleteFirst() throws Exception{  
        	if(first == null)  
            		throw new Exception("empty!"); 
	}
参考：https://zhidao.baidu.com/question/95292504.html

6.成员与内部类的继承
	成员和内部类都能够随外部类得到继承，但和父类中的成员和内部类都不是一样的东西，
	如A类中有c，B继承A也有c，但是A.c，B中重写c，则B中方法调用的c是B.c，B中可以使用A中继承来的方法a来操作A.c，但不能操作B.c。
	？？能否通过转型完成方法a对B.c的操作，即用父类方法调用处理子类成员？？
	？？如何在B中重写方法a的时候，实现复用a并改进？？
	参考问题：红黑树继承二叉搜索树

7.获取当前日期/时间
	使用Calendar类
	（1）demo1 获得当前分钟
	Calender cal = Calendar.getInstance();
	int minute = cal.get(Calendar.MINUTE);
	（2）获取文件修改时间
	long time = f.lastModified();
	cal.setTimeinMillis(time);
	String timeStr = cal.getTime().toString();
	
8.单元测试
	选中类，右击新建other-JUnit --> 勾选setUp()和tearDown() --> next勾选需要测试的方法。--> 编写测试代码 --> 右击测试文件，Run as JUint
	
9.socket掉线与程序计时
	客户端Socket掉线时，服务器端是无法检测到的。可以通过callable和Future实现延时断开
	demo：
		final ExecutorService exec = Executors.newFixedThreadPool(1);  
        Callable<String> call = new Callable<String>() {  
            public String call() throws Exception {  
                //开始执行耗时操作  
                Thread.sleep(1000 * 5);  
                return "线程执行完成.";  
            }  
        };   
        try {  
            Future<String> future = exec.submit(call);  
            String obj = future.get(1000 * 1, TimeUnit.MILLISECONDS); //任务处理超时时间设为 1 秒  
            System.out.println("任务成功返回:" + obj);  
        } catch (TimeoutException ex) {  
            System.out.println("处理超时啦....");  
            ex.printStackTrace();  
        }catch (Exception e) {  
            System.out.println("处理失败.");  
            e.printStackTrace();  
        }  
        // 关闭线程池  
        exec.shutdown(); 