一、文件概念
1.文件结构
	Linux一切皆文件（极少数，如网络连接外），操作系统服务，设备（串口、打印机等），目录（特殊的文件）都是文件
文件操作五个基本函数：open,close,read,write,ioctl

2.文件与目录
	文件除了自身内容，还有名字和属性（管理信息，包括创建修改日期，访问权限等），这些属性被保存在文件inode（节点）中，它是文件系统中一个特殊的数据块，同时还包含文件的长度和文件在磁盘上的存放位置。系统使用的是文件的inode编号，平时看到的文件名只是为了方便人们使用
	目录是用来保存其他文件的节点号和名字的文件。
	通过ls -i可以查看文件节点号
	通过ln指令可以创建指向文件的链接
	通过ls -l可以查看详细信息，如权限，链接数等

3.文件与设备
	硬件设备通常被表示（映射）为文件，如
	使用 mount -t iso9660 /dev/hdc /mnt/cdrom 可以将CD-ROM设备（系统启动时被装载为/dev/hdc）中的当前内容挂载为/mnt/cdrom目录下的文件结构 
	/dev/console：该设备表示系统控制台，错误信息和诊断信息会被发送到这个设备。 
	/dev/tty：一个进程有控制终端的话，那么特殊文件/dev/tty就是这个控制终端（键盘、显示器等）的别名 	/dev/null：是空设备。所有写向该设备的输出都将被丢弃， 如echo bye >/dev/null不会显示，也不会保存 而读这个设备会立刻返回一个文件尾标识，常用来建空文件 1.touch <filename> 该命令能改变文件的修改时间，如果指定文件不存在，则创建。但该命令不会吧有内容的文件变为空文件 2.cp /dev/null empty_file可以创建空文件

4.系统调用
	操作系统的核心，即内核，是一组设备驱动程序。他们是一组对系统硬件进行控制的底层接口。而系统调用函数则是通向操作系统本身的接口。 
	open:打开文件或设备 
	read:从打开的文件或设备读数据 
	write:向文件或设备写数据 
	close:关闭文件或设备 
	ioctl:把控制信息传递给设备驱动程序

5.底层文件访问
	每个运行中的程序被称为进程，它有一些与之关联的文件描述符（fd/file descriptor）。这是一些小值整数，可以通过他们访问打开的文件或设备。当一个程序开始运行时，一般会有3个已经打开的文件描述符
	0：标准输入
	1：标准输出
	2：标准错误输出

二、文件操作函数
1.write
-原型
#include <unistd.h>
size_t write(int fildes,const void *buf, size_t nbytes)
把缓冲区buf的前nbytes个字节写入与文件描述符fildes关联的文件中，并返回实际写入的字节数。返回0表示未写入，返回-1表示出现错误，错误代码保存在全局变量errno中
-例子：
#include <unistd.h>
#include <stdlib.h>
int main()
{
	if((write(1,"input", 5))!=18)
	{
		write(2,"error", 5);
	}
	exit(0);
}

2.read
-原型
#include <unistd.h>
size_t read(int fildes,const void *buf, size_t nbytes)
把缓冲区buf的前nbytes个字节写入与文件描述符fildes关联的文件中，并返回实际写入的字节数。返回0表示未读入，已到文件尾。返回-1表示出现错误，错误代码保存在全局变量errno中
-例子：
#include <unistd.h>
#incldue <stdlib.h>
int main()
{
	char buff[10];
	int nread;
	nread = read(0,buff,10);
	exit(0);
}
-使用
echo hello | ./simple_read
或重定向
./simple read < draft.txt

3.open
-原型
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
int open(const char *path, int oflags);
int open(const char *path, int oflags, mode_t mode);
-功能：
open建立了一条道文件或设备的访问路径，如果调用成功，将返回一个可被read，write和其他系统调用使用的文件描述符。这个文件描述符是唯一的，不会与任何其他运行中的进程共享。如果两个程序同时打开一个文件，他们会分别得到两个不同的文件描述符。如果都进行写操作，则各写各的，相互覆盖。
oflags格式
O_RDONLY	以只读方式打开
O_WRONLY	以只写方式打开
O_RDWR		以读写方式打开
还可以用安位或|组合以下模式
O_APPEND	写入数据追加在文末
O_TRUNC		把文件长度设置为0，丢弃已有内容
O_CREAT,O_EXCL等

4.close
-原型
#include <unistd.h>
int close(int fildes)
-功能：
可以使用close调用终止文件描述符fildes与其对应文件之间的关联。文件描述符被释放并能够重新使用。成功返回0，出错返回1

5.ioctl
-原型
#include  <unistd.h>
int ioctl(int fildes, int cmd, ...);
-功能：
提供了一个用于控制设备及其描述符行为和配置底层服务的接口
ioctl对描述符fildes引用的对象执行cmd参数中给出的操作。根据特定设备所支持操作的不同，它还可能会有一个可选的第三参数
-例子
ioctl(tty_fd, KDSETLED, LED_NUM|LED_CAP|LED_SCR);
打开键盘上的LED灯
-关于cmd
在驱动程序里， ioctl() 函数传送的变量 cmd 是应用程序用于区别设备驱动程序请求处理内容的值。
cmd的大小为 32位，共分 4 个域：

bit31~bit30 2位为 “区别读写” 区，作用是区分是读取命令还是写入命令。
bit29~bit15 14位为 "数据大小" 区，表示 ioctl() 中的 arg 变量传送的内存大小。
bit20~bit08  8位为 “魔数"(也称为"幻数")区，这个值用以与其它设备驱动程序的 ioctl 命令进行区别。
bit07~bit00   8位为 "区别序号" 区，是区分命令的命令顺序序号。
内核定义了 _IO() , _IOR() , IOW() 和 _IOWR() 这 4 个宏来辅助生成上面的 cmd 。
使用时，应用程序和驱动程序中的cmd能对应解析即可。

6.复制文件
例子1：
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
int mian()
{
	char c;
	int in, out;
	in = open("file.in", O_RDONLY);
	out = open("file.out", O_WRONLY|O_CREAT, S_IRUSR|S_IWUSR);
	while(read(in,&c,1) == 1)
	{
		write(out,&c,1);
	}
	exit(0);
}

例子2：
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>
int main()
{
	char block[1024];
	int in,out;
	int nread;
	in = open("file.in", O_RDONLY);
	out = open("file.out", O_WRONLY|O_CREAT,S_IRUSR|S_IWUSR);
	while((nread = read(in,block,sizeof(block)))>0)
	{
		write(out,block,nread);
	}
	exit(0);
}

7.lseek
原型：
#include <unistd.h>
#include <sys/types.h>
off_t lseek(int fildes, off_t offset, int whence);
offset参数用来指定位置，whence参数定义该偏移值的用法，包括:
SEEK_SET:offset是一个绝对位置
SEEK_CUR:offset是相对于当前位置的一个相对位置
SEEK_END:offset是相对于文尾的一个相对位置
lseek返回从文件头到文件指针被设置处的字节偏移值，失败时返回-1
功能：
对文件描述符fildes的读写指针进行设置

8.fstat、stat、lstat
原型：
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>
int fstat(int fildes, struct stat *buf);
int stat(const char *path, struct stat *buf);
int lstat(const char *path, struct stat *buf);
功能：
返回与打开的文件描述符相关的文件的状态信息，该信息会写到一个buf结构中，buf的地址以参数形式传给fstat

9.dup、dup2
#include <unistd.h>
int dup(int fildes);
int dup2(int fildes, int fildes2);
功能：
提供一种复制文件描述符的方法，使我们能够通过两个或更多个不同的描述符来访问同一个文件。

三、标准I/O库
1.文件流
头文件stdio.h
文件流stream被实现为指向结构FILE的指针

2.fopen
-原型
#include <stdio.h>
FILE *fopen(const char *filename, const char *mode);
-mode选项
"r"或"rb"：以只读方式打开
"w"或"wb"：以写方式打开，并把文件长度截短为0
"a"或"ab"：以写方式打开，新内容追加在文件尾
"r+"或"rb+"或"r+b"：以更新方式打开（读和写）
"w+"或"wb+"或"w+b"：以更新方式打开，并把文件长度截短为0
"a+"或"ab+"或"a+b"：以更新方式打开，新内容追加在文件尾
fopen成功时返回一个非空FILE *指针，失败时返回NULL
-功能：
打开filename参数指定的文件，并把它与一个文件流关联起来。

3.fread
-原型
#include <stdio.h>
size_t fread(void *ptr, size_t size, size_t nitems, FILE *stream);
-功能：
从一个文件流里读取数据。数据从文件流stream读到由ptr指向的数据缓冲区里。size参数指定每个数据记录的长度，计数器nitems给出要传输的记录个数。它返回成功读到数据缓冲区里的记录个数。

4.fwrite
-原型
#include <stdio.h>
size_t fwrite(const void *ptr, size_t sieze, size_t nitems,FILE *stream);
-功能：
从指定的数据缓冲区里取出数据，并把他们写到输出流中。

5.fclose
-原型：
#include <stdio.h>
int fclose(FILE *stream);
-功能：
关闭指定的文件流stream，使所有尚未写出的数据都写出。

6.fflush
-原型：
#include <stdio.h>
int fflush(FILE *stream);
-功能：
把文件流里的所有未写出数据立刻写出

7.fseek
-原型：
#include <stdio.h>
int fseek(FILE *stream, long int offset, int whence);
-功能：
在文件流里为下一次读写操作指定位置

8.fgetc、getc和getchar
-原型：
#include <stdio.h>
int fgetc(FILE *stream);
int getc(FILE *stream);
int getchar();
-功能：
fgetc函数从文件流里取出下一个字节并把它作为一个字符返回
当它到达文件尾或出现错误时，它返回EOF
getc函数的作用和fgetc一样，但它有可能被实现成为一个宏。
getchar函数的作用相当于getc(stdin)，它从标准输入里读取下一个字符。

9.fputc、putc和putchar
-原型：
#include
int fputc(int c, FILE *stream);
int putc(int c, FILE *stream);
int putchar(int c)；
-功能：
把一个字符写到一个输出文件流或标准输出中

10.fgets和gets
原型：
#include <stdio.h>
char *fgets(char *s, int n, FILE *stream);
char *gets(char *s);
功能：
fgets从输入文件流stream里读取一个字符串，并写到s指向的字符串里，直到遇到换行符，已经传输了n-1个字符，或者到达文件尾。它会把遇到的换行符也传到接收字符串里，再加上一个表示结尾的空字节\0.一次调用最多传输n-1个字符。
gets函数类似，不过它从标准输入读取数据并丢弃遇到的换行符。在接收字符串尾部加一个null字节


11.printf、fprintf和sprintf
-原型：
#include <stdio.h>
int prinf(const char *format, ...);
int sprintf(char *s, const char *format, ...);
int fprintf(FILE *stream, const char *format, ...);
-功能：
printf把自己的输出送到标准输出。fprintf把自己的输出送到一个指定的文件流。sprintf把自己的输出和一个结尾空字符写到作为参数传递过来的字符串s里，这个字符串必须足够容纳所有的输出数据。
-常用转换控制符
%d,%i：以十进制格式输出一个整数
%o,%x：以八进制或十六进制格式输出一个整数
%c：输出一个字符
%s：输出一个字符串
%f：输出一个（单精度）浮点数。
%e：以科学计数法格式输出一个双精度浮点数。
%g：以通用格式输出一个双精度

12.scanf、fscanf和sscanf
-原型：
#include <stdio.h>
int scanf(const char *format, ...);
int fscanf(FILE *stream, const char *format, ...);
int sscanf(const char *s, const char *format, ...);
-功能：
与printf类似

13.例子
#include <stdio.h>
#include <stdlib.h>
int main()
{
	int c;
	FILE *in, *out;
	in = fopen("陈绮贞","r");
	out = fopen("陈绮贞2","w");
	while((c = fgetc(in)) != EOF)
	{
		fputc(c,out);
	}
	exit(0);
}

四、文件流错误
#include <errno.h>
extern int errno;
为了表明错误，许多stdio库函数会返回一个超出范围的值。此时，错误由外部变量errno指出。
-原型：
#include <stdio.h>
int ferror(FILE *stream);
int feof(FILE *stream);
void clearerr(FILE *stream);
-功能：
ferror函数测试一个文件流的错误标识，如果该标识被设置就返回一个非零值，否则返回零
feof函数测试一个文件流的文件尾标识，如果该标志被设置就返回非零值，否则返回零。
-例子：
if(feof(some_stream))
{//到达文尾}
clearerr清除由stream指向的文件流的文件尾标识和错误标识。

每个文件流都和一个底层文件描述符相关联，可以把底层的输入输出操作与高层的文件流操作混合使用，但一般来说不建议，因为数据缓冲的后果难以预料

五、文件和目录的维护
1.chmod系统调用
-原型：
#include <sys/stat.h>
int chmod(const char *path, mode_t mode);
-功能：
改变文件或目录的访问权限。这构成了shell程序chmod的基础

2.chown
-原型：
#Include <sys/types.h>
#include <unistd.h>
int chown(const char *path, uid_t owner, gid_t group);
-功能：
使用用户ID和组ID的数字值（通过getuid和getgid获得）和一个用于限定谁可以修改文件属主的系统值，来改变一个文件的属主

3.unlink,link和symlink
-原型：
#include <unistd.h>
int unlink(const char *path);
int link(const char *path1,const char *path2);
int symlink(const char *path1, const char *path2);
-功能：
unlink删除一个文件的目录项并减少它的链接数
link创建一个指向已有文件path1的新连接，新目录项由path2给出，symlink类似

4.mkdir和rmdir
-原型：
#include <sys/types.h>
#include <sys/stat.h>
int mkdir(const char *path, mode_t mode);
-功能：创建目录
-原型：
#include <unistd.h>
int rmdir(const char *path);
-功能：删除目录

5.chdir和getcwd
-原型：
#include <unistd.h>
int chdir(const char *path);
char *getcwd(char *buf, size_t size);
-功能：
chdir是cd实现的基础，用于切换目录
getcwd用于确定当前目录，把当前目录的名字写到给定的缓冲区buf里。

六、扫描目录
	与目录操作有关的函数在dirent.h头文件中声明。它们使用一个名为DIR的结构作为目录操作的基础。被称为目录流的指向这个结构的指针（DIR *）被用来完成各种目录操作。
1.opendir
-原型：
#include <sys/types.h>
#include <dirent.h>
DIR *opendir(const char *name);
-功能：
打开一个目录并建立一个目录流。如果成功，返回一个指向DIR结构的指针，该指针用于读取目录数据项。失败时返回一个空指针。

2.readdir
-原型：
#include <sys/types.h>
#include <dirent.h>
struct dirent *readdir(DIR *dirp);
-功能：
返回一个指针，指向的结构里保存着目录流dirp中下一个目录项的有关资料。后续的调用将返回后续的目录项。发生错误或到达目录尾是，返回NULL

3.telldir
-原型：
#include <sys/types.h>
#include <dirent.h>
long int telldir(DIR *dirp);
-功能：
返回值记录着一个目录流里的当前位置。

4.seekdir
-原型：
#include <sys/types.h>
#include <dirent.h>
void seekdir(DIR *dirp, long int loc);
-功能：
设置目录流dirp的目录项指针。loc值用来设置指针位置，通过前一个telldir调用获得。

5.closedir
-原型：
#include <sys/types.h>
#include <dirent.h>
int closedir(DIR *dirp);
-功能：
关闭一个目录流并释放与之关联的资源

6.S_ISDIR()
判断某文件是否为目录文件
if (S_ISDIR(statbuf.st_mode))  //true
else //false

七、错误处理
1.错误宏：
一般用外部变量errno的值指明失败的原因，取值和含义在errno.h中
EPERM:操纵不允许
ENOENT:文件或目录不存在
EINTR:系统调用被中断
EIO:I/O错误
EBUSY:设备或资源忙
EEXIST:文件存在
EINVAL:无效参数
EMFILE:打开的文件过多
ENODEV:设备不存在
EISDIR:是一个目录
ENOTDIR:不是一个目录

2.strerror
-原型：
#include <string.h>
char *strerror(int errnum)
-功能：
把错误代码映射为一个字符串

3.perror
-原型：
#include <stdio.h>
void perror(const char *s);
-功能：
吧errno变量中报告的当前错误映射到一个字符串，并把它输出到标准错误输出流。

八、其他
1.fcntl
-原型：
#include <fcntl.h>
int fcntl(int fildes, int cmd);
int fcntl(int fildes, int cmd, long arg);
-功能：
对底层文件描述符提供更多的操纵方式

2.mmap
-原型
#include <sys/mman.h>
void *mmap(void *addr, size_t len,int prot, int flags, int fildes, off_t off);
-功能：
允许程序共享内存。