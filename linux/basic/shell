一、重定向
1.重定向输出（不会在终端显示）
（1）> 把标准输出重定向到一个文件
	ls -l > lsoutput.txt
（2）>> 将输出内容附加到一个文件中
	ps >> lsoutput.txt
（3）文件描述符0表示输入，1表示输出，2表示错误输出
2 > 丢弃错误信息并阻止其在终端显示

2.重定向输入
< 与输出相反

3.管道
通过管道操作符 | 来连接进程，如
ps | sort > pssort.out
等同于
ps > psout.txt
sort psout.txt > pssort.out

二、脚本
1. 脚本注释
#! /bin/sh 放在第一行，告诉系统同行上紧跟后面的参数（/bin/sh,默认的shell程序）用来执行本文件程序
2.运行脚本
（1）/bin/sh first 直接用shell运行first脚本
（2）chmod +x first 设置为可执行，之后直接通过first来执行脚本。
但shell环境变量PATH并没有设置为在当前目录下查找要执行的命令，解决此问题，方法
a.PATH=$PATH:.	把当前目录加入环境变量
b.编辑.bash_profile文件，将上述命令加入文末
c.在保存脚本程序的目录中输入命令./first,从而把脚本程序的完整相对路径告诉shell

三、shell语法
1.变量
-不用声明，默认情况下都是字符串，$用来访问变量内容。赋值时直接使用即可。
-echo命令可以输出变量内容。如echo $var
-字符串中包含空格，必须要用双引号，等号两边不能有空格
-read指令可以读取用户输入赋值给变量，如read var
-默认变量 $HOME 当前用户家目录，$PATH 以冒号分隔的用来搜索命令的目录列表
-如果要在变量后面添加一个字符，可用的方法：
$value1=home
$value2=${value1}"="
echo $value2
把要添加的字符串变量添加{}，并且需要把$放在外面。这样输出的结果是home=，也就是说连接成功。

2.条件
test或[  	bool判断命令
如test -f -fred.c或[ -f -fred.c ]判断fred.c是否存在
具体可判断三类
（1）字符串
string1 = string2 
string1 != string
-n string 	字符串不为空则为真
-z string	字符串为null则为真
（2）算术比较
exp1 -eq exp2		表达式相等为真
exp1 -ne exp2		表达式不等为真
exp1 -gt exp2		exp1>exp2为真
exp1 -ge exp2		>=
exp1 -lt exp2		<
exp1 -le exp2		<=
（3）文件
-d file  如果文件是一个目录则为真
-e file  如果文件存在则为真，一般用-f
-f file  如果文件是一个普通文件则为真
-g file  如果文件的set-group-id位被设置则结果为真
-r file  如果文件可读则为真
-s file  如果文件大小不为0则为真
-u file  如果文件的set-user-id位被设置则结果为真
-w file  如果文件可写则为真
-x  file  如果文件可执行则结果为真

3.控制结构
（1）if语句
if condition
then
	statements
elif
	statement
else
	statements
fi
（2）for
//循环将字符串bar，fud和43赋给foo并输出
for foo in bar fud 43		//for foo in "bar fud 43"则把字符串bar fud 43赋给foo输出
do 
	echo $foo
done
exit 0
//循环ls f*.sh的输出结果
for file in $(ls f*.sh)
（3）while
while condtion
do 
	statements
done
如
while	["$trythis" != "secret"]
do
	echo  "sorry"
done
exit0
（4）until
until  condition
do
	statements
done
（5）case
case  variable  in
	pattern [ | pattern2 | pattern3 ..] ) statements [ statements2 statements3 ];;
	...
esac
中括号为可选项，最后要有两个;;

4.函数
foo() { echo "function" }
echo "script start"
foo
echo "script end"
exit 0
虽然没有前向声明，但函数定义一定要在调用之前
例子：
-脚本my_name
greed()
{
	echo "is your name $* ?"
	while true
	do 
		echo -n "Enter yes or no"
		read x
		case "$x" in
			y | yes ) return 0 ;;
			n | no ) return 1 ;;
		esac
	done
}
echo "Original parameters are $*"		//$*类似于参数数组
if greed "$1"	//$1表示第一个参数
then
	echo  "Hi $1, nice name"
else 
	echo "never mind"
fi
exit 0
函数参数的传递通过位置参数$*,$@,$#,$1,$2等传递，通过return返回值
-使用
./my_name Rhett Van
Orignial parameters are Rhett Van
Is your name Rhett?
Enter yes or no: yes
Hi Rhett, nice name

5.命令
（1）.命令
在当前shell中执行命令
如两个脚本
///old_set
version=classic
PATH=/usr/old/bin
PS1="old>"	//运行后头部会显示该字符串
///new_set
version=new
PATH=/usr/new/bin
PS="new>"
使用
. ./old_set
. ./new_set

（2）echo和printf
在终端输出
echo （转行）
echo -n （不转行）
printf （不转行）
printf "%s %d\t%s" "there" 15 people
输出there 15 people

（3）eval
有点像额外的$，给出一个变量的值的只
foo=10
x='$'foo
echo $x		//显示$foo
eval x='$'foo
echo $x		//显示10

（4）exit n
已退出码n结束运行
0表示成功，1~125为可使用的错误代码，126文件不可执行，127命令未找到，128及以上：出现一个信号

（5）export
默认情况下一个shell中被创建的变量在这个shell调用的下级（子）shell中是不可用的。export命令把自己的参数创建为一个环境变量，而这个环境变量可以被当前程序调用的其他脚本和程序看见，如
///export2///
#! /bin/sh
echo "$foo"
echo "$bar"
///export1///
#! /bin/sh
foo="foooo"
export bar="barrrr"
export2
///运行///
./export1
barrrr	//只有export了的bar能被找到

（6）expr
将参数作为一个表达式来求解，如
x=3
y=` expr $x + 3`	//要用反引号，键盘左上角那个
或y=$(expr $x + 3)
则y等于6

（7）set
为shell设置参数变量，如
echo $(date)	//显示2016年07月15日...
set $(date)	//把date命令的输出作为参数列表
echo the month is $2	//输出07月

（8）unset
从环境中删除变量或函数，如
foo='e'
unset foo	//foo变量就没了

（9）shift
将所有参数变量左移一个位置，$1代表第二个参数，$2代表第三个参数...再来一次，则$1代表第三个参数

（10）trap
trap用于指定在接收到信号（中断/事件）后要采取的行动
trap command signal如
trap 'echo hah' INT	//INT是中断，按ctrl+c触发，则输出hah
trap 显示当前指定的tarp行为
trap -l产看信号编号及关联名称
trap - signal恢复默认行为
trap '' signal 不行为

（11）find（不是shell命令）
find [path] [options] [tests] [actions]
path 为路径，可绝对可相对，可多个（用空格隔开）
options 选项-maxdepths	N最多搜索N层目录，-mount（或-xdev）不搜索其他文件系统中的目录
tests 测试，如-type d判断是否是目录(d，普通文件是f），如果不是则停止处理该文件（不算这个文件），继续处理下面其他的
例子:
find	/ -name hello -print
在根目录下寻找名为hello 的文件并输出地址

（12）grep命令（不是shell命令）
通用正则表达式解析器
grep [options] PATTERN [FILES]
options -c输出匹配行的数目，而不是输出匹配的行
	-i 忽略大小写
例子：
grep are words.txt	//在words.txt中搜索are，并显示所在行
grep -c are words.txt words2.txt	//分别在words.txt和words2.txt中搜索are，并显示其出现的次数

（13）正则表达式
-特定字符
^	指向一行的开头
$	指向一行的结尾
.	任意单个字符
[]	方括号内包含一个字符范围，其中任何一个字符都可以被匹配，例如字符范围a~e
如果将上述字符用作普通字符需要在前面加\

-匹配模式
[:alnum:]	字母与数字字符
[:alpha:]	字母
[:ascii:]	ASCII字符
[:blank:]	空格或制表符
[:cntrl:]	ASCII控制字符
[:digit:]	数字
[:graph:]	非控制、非空格字符
[:lower:]	小写字母
[:print:]	可打印字符
[:punct:]	标点符号字符
[:space:]	空白字符，包括垂直制表符
[:upper:]	大写字母
[:xdigit:]	十六进制数字

-扩展控制匹配字符，需要在前面加\
选项
?	匹配是可选的，但最多匹配一次
*	必须匹配0次或多次
+	必须匹配1次或多次
{n}	必须匹配n次
{n,}	必须匹配n次或n次以上
{n,m}	匹配次数在n到m之间，包括n和m
例子：
grep e$ wd.txt	//查找以字母e结尾的行
grep a[[:blank:]] wd.txt //它用来测试空格或制表符，即搜索a空格
grep Th.[[:space:]] wd.txt	//搜索以th开头的有三个字母的单词，如The空格，其中.匹配任意字符
grep -E [a-z]\{10\} wd.txt	//扩展grep模式搜索只有10个字符长的全部由小写字母组成的单词


（14）算术扩展
$((...))用于算术命令。如：
x=10
y=$(($x+3))	变量y为13

（15）参数扩展
用{}可实现变量替换，如处理1_tmp和2_tmp两个文件
for i in 1 2
do
	process ${i}_tmp
done

（16）here文档
以<<开始，紧跟特殊字符序列作为标志，该标志在结尾处也出现，如
cat <<!HEHE!
hello
!HEHE!
会输出hello


（17）dialog工具
简单例子：dialog --msgbox "hello world" 9 18
可创建选项 
--checklist	复选框
--infobox	信息框
--inputbox	输入框
--menu		菜单框
--msgbox	消息框
--radiolist	单选框
--textbox	文本框
--yesno		是/否框
详细参数用dialog --help查看
可以通过重定向标准错误流或$?获取用户输入结果
例子1：
dialog --title "choose" --yesno "do you love me" 9 18
选yes $？ 为0 no 为1
例子2：
dialog --title "question" --inputbox "enter your name" 9 30 2>_1.txt
Q_NAME_$(cat _1.txt)
把输入的名字重定向到临时文件_1.txt，再放到Q_NAME中

（18）ps
查看进程 
ps -A/-e 显示所有进程
其他参数man ps
查得进程号后可通过kill杀死。