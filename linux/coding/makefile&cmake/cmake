hello world例子
（1）编写main.c
（2）编写CMakeLists.txt。内容：
	PROJECT(HELLO)
	SET(SRC_LIST main.c)
	MESSAGE(STATUS "This is BINARY dir " $(HELLO_BINARY_DIR})
	MESSAGE(STATUS "This is SOURCE dir " ${HELLO_SOURCE_DIR})
	ADD_EXECUTABLE(hello ${SRC_LIST})
（3）cmake .(.代表本目录）
（4）make(实际编译）
（5）运行生成的程序

PROJECT指令语法
PROJECT(projectname [CXX] [C] [JAVA])
	用于定义工程名，并可指定工程支持的语言，支持语言表可以忽略，默认支持所有语言。
	这个指令隐式的定义了两个 cmake 变量:
<projectname>_BINARY_DIR以及<projectname>_SOURCE_DIR，这里就是HELLO_BINARY_DIR和HELLO_SOURCE_DIR(所以CMakeLists.txt中两个MESSAGE指令可以直接使用了这两个变量)，因为采用的是内部编译，两个变量目前指的都是工程所在路径/backup/cmake/t1
	同时cmake 系统也帮助我们预定义了 PROJECT_BINARY_DIR和PROJECT_SOURCE_DIR
变量，他们的值分别跟HELLO_BINARY_DIR与HELLO_SOURCE_DIR一致。为了统一起见，建议以后直接使用PROJECT_BINARY_DIR，PROJECT_SOURCE_DIR，即使修改了工程名称，也不会影响这两个变量。

SET指令语法
SET(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])
	可以用来显式定义变量，如SET(SRC_LIST main.c t1.c)即定义变量SRC_LIST为main.c t1.c

MESSAGE指令语法
MESSAGE([SEND_ERROR | STATUS | FATAL_ERROR] "message to display" ...)
这个指令用于向终端输出用户定义的信息，包含了三种类型
	SEND_ERROR,产生错误，生成过程被跳过
	STATUS,输出前缀为-的信息
	FATAL_ERROR,立即终止所有cmake过程

ADD_EXECUTABLE(hello ${SRC_LIST})
	定义了这个工程会生成一个文件名为hello的可执行文件，相关的源文件是SRC_LIST中定义的源文件列表。
	变量使用${}方式取值，但在IF控制语句中直接使用变量名

清理工程：
	make clean

外部编译：
	建立build目录，在build目录下运行cmake ..然后make
	好处是编译需要的makefile以及中间文件都在build目录下，而对原有工程没有影响。
	采用外部编译PROJECT_SOURCE_DIR仍然指代工程路径,但PROJECT_BINARY_DIR为工程路径/build


改进：
（1）添加子目录src，把源文件放在该目录下
需要为任何子目录建立CMakeLists.txt，在src下编写CMakeLists.txt，内容为
ADD_EXECUTABLE(hello main.c)
（2）工程目录下的CMakeLists.txt修改为
PROJECT(HELLO)
ADD_SUBDIRECTORY(src bin)
（3）建立build目录，cmake ..   make

ADD_SUBDIRECTORY指令语法
ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])
	这个指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置EXCLUDE_FROM_ALL参数的含义是将这个目录从编译过程中排除
	上面的例子定义了将src子目录加入工程，并指定编译输出(包含编译中间结果)路径为bin目录。如果不进行 bin目录的指定，那么编译结果(包括中间结果)都将存放在build/src 目录(这个目录跟原有的src目录对应)，指定 bin 目录后，相当于在编译时将src重命名为bin，所有的中间结果和目标二进制都将存放在bin目录。

指定存放路径：
我们可以通过SET指令重新定义EXECUTABLE_OUTPUT_PATH 和LIBRARY_OUTPUT_PATH 变量来指定最终的目标二进制的位置(指最终生成的hello或者最终的共享库，不包含编译生成的中间文件)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

在工程的 CMakeLists.txt 还是 src 目录下的CMakeLists.txt，把握一个简单的原则，在哪里ADD_EXECUTABLE或ADD_LIBRARY，如果需要改变目标存放路径，就在哪里加入上述的定义。


安装：
	安装的需要有两种，一种是从代码编译后直接 make install安装，一种是打包时的指定
目录安装。
