多线程
一、.线程创建
#include <pthread.h>
int pthread_creat(pthread_t *restrict tidp,const pthread_attr_t *attr,void*(*start_rtn)(void),void *restrict arg);   //创建线程
 成功返回0，否则返回错误编号
tidp 指向的内存单元被设置为新创建的现成的线程ID
attr 用于定制线程的线程属性，设置为NULL时，则使用默认属性
新创建的函数从strat_rtn函数的地址开始运行，该函数只有一个无类型指针参数arg.
若要想向strat_rtn传递不知一个参数，可以将多个参数放在一个结构体中，然后把结构体的地址作为arg参数传入。
-----demo：
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void* thread1(void* ss)
{
    pthread_detach(pthread_self());//分离后仍可被等待
    printf("pid is: %d, tid is: %d\n", getpid(),pthread_self());
    return (void*)1;
}
int main()
{
    pthread_t tid;
    void *ret;
    int err = pthread_create(&tid, NULL, thread1, NULL);
    if (err != 0)
    {
        perror("pthread_create\n");
        return err;
    }
    //如果直接运行等待代码，一般会等待成功，返回1
    //如果在等待之前加入取消。等待错误，返回-1
    //  pthread_cancel(tid);
    //线程可以自我取消也可以被取消，线程终止
    //调用pthread_exit(tid);和取消同样用法。
    int tmp = pthread_join(tid, &ret);
    if (tmp == 0)
    {
        printf("wait success\n");
    }
    else
    {
        printf("wait failed\n");
    }
    printf(" pid is: %d, tid is: %d\n", getpid(),pthread_self());
    sleep(1);
    return 0;
}