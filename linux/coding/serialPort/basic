一、需要的头文件
#include     <stdio.h>      /*标准输入输出定义*/
#include     <stdlib.h>     /*标准函数库定义*/
#include     <unistd.h>     /*Unix 标准函数定义*/
#include     <sys/types.h>  
#include     <sys/stat.h>   
#include     <fcntl.h>      /*文件控制定义*/
#include     <termios.h>    /*PPSIX 终端控制定义*/
#include     <errno.h>      /*错误号定义*/

二、打开串口
int fd;
fd = open( "/dev/ttyS0", O_RDWR | O_NOCTTY | O_NDELAY);
if (-1 == fd){ perror(" 提示错误！"); }

open函数第一个参数：
	/dev/ttyS0串口1；/dev/ttyS1串口2；/dev/ttyUSB0 USB/RS-232转换器
open函数第二个参数：
	可能值：必须指定下面某一种:
        O_RDONLY(只读),
        O_WRONLY（只写）,
        O_RDWR（可读可写）
打开/创建文件时，至少得使用上述三个常量中的一个
	O_NOCTTY可以告诉UNIX这个程序不会成为这个端口上的“控制终端”.如果不这样做的话,所有的输入,比如键盘上过来的Ctrl+C中止信号等等,会影响到你的进程.而有些程序比如getty(1M/8)则会在打开登录进程的时候使用这个特性,但是通常情况下,用户程序不会使用这个行为.
	O_NDELAY标志则是告诉UNIX,这个程序并不关心DCD信号线的状态――也就是不关心端口另一端是否已经连接.如果不指定这个标志的话,除非DCD信号线上有space电压否则这个程序会一直睡眠.

三、设置串口（波特率，数据位，校验位，停止位）
1.POSIX终端(串口)接口
	很多系统都支持POSIX终端(串口)接口.程序可以利用这个接口来改变终端的参数,比如,波特率,字符大小等等.要使用这个端口的话,你必须将<termios.h>头文件包含到你的程序中.这个头文件中定义了终端控制结构体和POSIX控制函数.
	与串口操作相关的最重要的两个POSIX函数可能就是tcgetattr(3)和tcsetattr(3).这两个函数分别用来取得设设置终端的属性.
	调用这两个函数的时候,你需要提供一个包含着所有串口选项的termios结构体,
	串口的设置主要是设置struct termios结构体的各成员值.
成员	描述
c_cflag	控制选项
c_lflag	行选项
c_iflag	输入选项
c_oflag	输出选项
c_cc	控制字符
c_ispeed	输入波特率(NEW)
c_ospeed	输出波特率(NEW)

常用常量
常量	描述
CBAUD	Bit mask for baud rate
B0	0 baud (drop DTR)
B50	50 baud
B75	75 baud
B110	110 baud
B134	134.5 baud
B150	150 baud
B200	200 baud
B300	300 baud
B600	600 baud
B1200	1200 baud
B1800	1800 baud
B2400	2400 baud
B4800	4800 baud
B9600	9600 baud
B19200	19200 baud
B38400	38400 baud
B57600	57,600 baud
B76800	76,800 baud
B115200	115,200 baud
EXTA	External rate clock
EXTB	External rate clock
CSIZE	Bit mask for data bits
CS5	5 data bits
CS6	6 data bits
CS7	7 data bits
CS8	8 data bits
CSTOPB	2 stop bits (1 otherwise)
CREAD	Enable receiver
PARENB	Enable parity bit
PARODD	Use odd parity instead of even
HUPCL	Hangup (drop DTR) on last close
CLOCAL	Local line - do not change "owner" of port
LOBLK	Block job control output
CNEW_RTSCTS/CRTSCTS	Enable hardware flow control (not supported on all platforms)

2.简单示例
int set_Seri(int fd,int databits,int stopbits,int parity)
{ 
    struct termios options; 
    if  ( tcgetattr( fd,&options)  !=  0) { perror("SetupSerial 1");     return(FALSE);   }	//保存旧设置

    //设置波特率
    cfsetispeed(&options, B19200);	//输入速度19200
    cfsetospeed(&options, B19200);
    options.c_cflag |= (CLOCAL | CREAD);	//使能接收器并设置为本地模式

    //设置数据位
    options.c_cflag &= ~CSIZE; 	//用数据位掩码清空数据位设置
    switch (databits) 		//设置数据位数
    {   
    case 7:        
        options.c_cflag |= CS7; break;
    case 8:     
        options.c_cflag |= CS8; break;   
    default:    
        fprintf(stderr,"Unsupported data size\n"); return (FALSE);  
    }

    //设置校验
    switch (parity) 
    {   
    case 'n':
    case 'N':    	//无校验
        options.c_cflag &= ~PARENB;   //清除校验位使能
        options.c_iflag &= ~INPCK;     /* Enable parity checking */ 
        break;  
    case 'o':   
    case 'O':     //奇校验
        options.c_cflag |= (PARODD | PARENB); //设置为奇效验
        options.c_iflag |= INPCK;             /* Disnable parity checking */ 
        break;  
    case 'e':  
    case 'E':   //偶校验
        options.c_cflag |= PARENB;     //使能校验  
        options.c_cflag &= ~PARODD;   // 转换为偶效验    
        options.c_iflag |= INPCK;       /* Disnable parity checking */
        break;
    case 'S': 
    case 's':  	//space奇偶校验
        options.c_cflag &= ~PARENB;
        options.c_cflag &= ~CSTOPB;break;  
    default:   
        fprintf(stderr,"Unsupported parity\n");    
        return (FALSE);  
    }  

    //设置停止位
    switch (stopbits)
    {   
    case 1:    
        options.c_cflag &= ~CSTOPB;   break;  	//一个停止位
    case 2:    
        options.c_cflag |= CSTOPB;  break;	//两个停止位
    default:    
         fprintf(stderr,"Unsupported stop bits\n");  
         return (FALSE); 
    } 

    //设置生效
    if (parity != 'n')   
        options.c_iflag |= INPCK; 
    tcflush(fd,TCIFLUSH);		//刷新设置
    options.c_cc[VTIME] = 150; 	//设置超时150 十分之一秒，即15s，
    options.c_cc[VMIN] = 0; 	//VMIN可以指定读取的最小字符数.如果它被设置为0,那么VTIME值则会指定每个字符读取的等待时间.
    if (tcsetattr(fd,TCSANOW,&options) != 0)   //设置新参数，第二个参数表示立即生效
    {  perror("SetupSerial 3");   return (FALSE);  } 
    return (TRUE);  
}

3.更多设置
	参考http://www.cnblogs.com/jason-lu/articles/3173988.html

四、读写串口
1.发送/写串口
char  buffer[1024];
int    Length;
int    nByte;
nByte = write(fd, buffer ,Length);

2.读取/读串口
char  buff[1024];
int    Len;
int  readByte;
readByte = read(fd,buff,Len);

五、关闭串口
close(fd)；