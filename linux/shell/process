进程
1.进程的分类
第一个角度来看，我们可以分为用户进程与系统进程
用户进程：通过执行用户程序、应用程序或称之为内核之外的系统程序而产生的进程，此类进程可以在用户的控制下运行或关闭。
系统进程：通过执行系统内核程序而产生的进程，比如可以执行内存资源分配和进程切换等相对底层的工作；
而且，该进程的运行不受用户的干预，即使是root用户也不能干预系统进程的运行。
---
第二角度来看，我们可以将进程分为交互进程、批处理进程、守护进程
交互进程：由一个 shell 终端启动的进程，在执行过程中，需要与用户进行交互操作，可以运行于前台，也可以运行在后台。
批处理进程：该进程是一个进程集合，负责按顺序启动其他的进程。
守护进程：守护进程是一直运行的一种进程，经常在 Linux 系统启动时启动，在系统关闭时终止。
它们独立于控制终端并且周期性的执行某种任务或等待处理某些发生的事件。
例如httpd进程，一直处于运行状态，等待用户的访问。还有经常用的 cron（在 centOS 系列为 crond） 进程，
这个进程为 crontab 的守护进程，可以周期性的执行用户设定的某些任务。

2.fork && exec
关于父进程与子进程便会提及这两个系统调用 fork() 与 exec()
fork() 是一个系统调用（system call），它的主要作用就是为当前的进程创建一个新的进程，这个新的进程就是它的子进程，
这个子进程除了父进程的返回值和 PID 以外其他的都一模一样，如进程的执行代码段，内存信息，文件描述，寄存器状态等等
exec() 也是系统调用，作用是切换子进程中的执行程序也就是替换其从父进程复制过来的代码段与数据段
子进程就是父进程通过系统调用 fork() 而产生的复制品，fork() 就是把父进程的 PCB 等进程的数据结构信息直接复制过来，
只是修改了 PID，所以一模一样，指挥在执行 exec() 之后才会不同，而早先的 fork() 比较消耗资源后来进化成 vfork(),效率高了不少，
---
既然子进程是通过父进程而衍生出来的，那么子进程的退出与资源的回收定然与父进程有很大的相关性。
当一个子进程要正常的终止运行时，或者该进程结束时它的主函数 main() 会执行 exit(n); 
或者 return n，这里的返回值 n 是一个信号，系统会把这个 SIGCHLD 信号传给其父进程，当然若是异常终止也往往是因为这个信号。
而这个时候的子进程代码执行部分其实已经结束执行了，系统的资源也基本归还给系统了，
但是其进程的进程控制块（PCB）仍驻留在内存中，而它的 PCB 还在，
代表这个进程还存在（因为 PCB 就是进程存在的唯一标志，里面有 PID 等消息），并没有消亡，这样的进程称之为僵尸进程（Zombie）
正常情况下，父进程会收到两个返回值一个是 exit code 也是 SIGCHLD 信号与 reason for termination 之后，
父进程会使用 wait(&status) 系统调用以获取子进程的退出状态，然后内核就可以从内存中释放已结束的子进程的 PCB；
而如若父进程没有这么做的话，子进程的 PCB 就会一直驻留在内存中，一直留在系统中做为僵尸进程（Zombie）。
虽然僵尸进程是已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，在进程列表中保留一个位置，
记载该进程的退出状态等信息供其父进程收集，从而释放它。但是 Linux 系统中能使用的 PID 是有限的，
如果系统中存在有大量的僵尸进程，系统将会因为没有可用的 PID 从而导致不能产生新的进程。
---
而另外如果父进程结束（非正常的结束），未能及时收回子进程，子进程仍在运行，这样的子进程称之为孤儿进程。
在 Linux 系统中，孤儿进程一般会被 init 进程所“收养”，成为 init 的子进程。由 init 来做善后处理，
所以它并不至于像僵尸进程那样无人问津，不管不顾，大量存在会有危害。

3.进程的查看
（1）top 工具的使用

top 工具是我们常用的一个查看工具，他能实时的查看我们系统的关键一些关键信息的变化已经进程在进程中的实时变化
我们看到 top 显示的第一排，
内容 解释
top 表示当前程序的名称
11:05:18 表示当前的系统的时间
up 8 days,17:12 表示该机器已经启动了多长时间
1 user 表示当前系统中只有一个用户
load average: 0.29,0.20,0.25 分别对应1、5、15分钟内cpu的平均负载
#查看物理CPU的个数
#cat /proc/cpuinfo |grep "physical id"|sort |uniq|wc -l
#每个cpu的核心数
cat /proc/cpuinfo |grep "physical id"|grep "0"|wc -l
top 的第二行数据，基本上第二行是进程的一个情况统计
内容 解释
Tasks: 26 total 进程总数
　 1 running 1个正在运行的进程数
25 sleeping 25个睡眠的进程数
0 stopped 　没有停止的进程数
0 zombie 没有僵尸进程数
来看 top 的第三行数据，这一行基本上是 CPU 的一个使用情况的统计了
内容 解释
Cpu(s): 1.0%us 用户空间占用CPU百分比
1.0% sy 内核空间占用CPU百分比
0.0%ni 用户进程空间内改变过优先级的进程占用CPU百分比
97.9%id 空闲CPU百分比
0.0%wa 等待输入输出的CPU时间百分比
0.1%hi 硬中断(Hardware IRQ)占用CPU的百分比
0.0%si 软中断(Software IRQ)占用CPU的百分比
0.0%st (Steal time) 是当 hypervisor 服务另一个虚拟处理器的时候，虚拟 CPU 等待实际 CPU 的时间的百分比
来看 top 的第四行数据，这一行基本上是内存的一个使用情况的统计了
内容 解释
8176740 total 物理内存总量
8032104 used 使用的物理内存总量
144636 free 空闲内存总量
313088 buffers 用作内核缓存的内存量
来看 top 的第五行数据，这一行基本上是交换区的一个使用情况的统计了
内容 解释
total 交换区总量
used 使用的交换区总量
free 空闲交换区总量
cached 缓冲的交换区总量,内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖
在下面就是进程的一个情况了
列名 解释
　PID 进程id
USER 该进程的所属用户
PR 该进程执行的优先级priority 值
NI 该进程的 nice 值
VIRT 该进程任务所使用的虚拟内存的总数
RES 该进程所使用的物理内存数，也称之为驻留内存数
SHR 该进程共享内存的大小
S 该进程进程的状态: S=sleep R=running Z=zombie
%CPU 该进程CPU的利用率
%MEM 该进程内存的利用率
TIME+ 该进程活跃的总时间
COMMAND 该进程运行的名字
在上文我们曾经说过 top 是一个前台程序，所以是一个可以交互的
常用交互命令 解释
q 退出程序
I 切换显示平均负载和启动时间的信息
P 根据CPU使用百分比大小进行排序
M 根据驻留内存大小进行排序
i 忽略闲置和僵死的进程，这是一个开关式命令
k 终止一个进程，系统提示输入 PID 及发送的信号值。一般终止进程用15信号，不能正常结束则使用9信号。安全模式下该命令被屏蔽。
（2）ps 工具的使用
ps aux 将会罗列出所有的进程信息
ps aux | grep zsh 若是查找其中的某个进程的话，我们还可以配合着 grep 和正则表达式一起使用
ps axjf 我们还可以查看时，将连同部分的进程呈树状显示出来
ps -l 使用 -l 参数可以显示自己这次登陆的 bash 相关的进程信息罗列出来
（3）pstree 工具的使用
通过 pstree 可以很直接的看到相同的进程数量，最主要的还是我们可以看到所有进程的之间的相关性。

4.进程的管理
（1）kill 命令的掌握
kill PID
（2）进程的执行顺序
优先级的值就是上文所提到的 PR 与 nice 来控制与体现了
而 nice 的值我们是可以通过 nice 命令来修改的，而需要注意的是 nice 值可以调整的范围是 -20 ~ 19
我们还可以用 renice 来修改已经存在的进程的优先级
renice -5 pid
 0
