文本处理
1.tr 命令
tr 命令可以用来删除一段文本信息中的某些文字。或者将其进行转换。
使用方式：
tr [option]...SET1 [SET2] 
常用的选项有：
选项 说明
-d 删除和set1匹配的字符，注意不是全词匹配也不是按字符顺序匹配
-s 去除set1指定的在输入文本中连续并重复的字符
操作举例：
删除 "hello shiyanlou" 中所有的'o','l','h' 
$ echo 'hello shiyanlou' | tr -d 'olh' 
---
将"hello" 中的ll,去重为一个l 
$ echo 'hello' | tr -s 'l' 
---
将输入文本，全部转换为大写或小写输出 
$ cat /etc/passwd | tr '[:lower:]' '[:upper:]' 
上面的'[:lower:]' '[:upper:]'你也可以简单的写作'[a-z]' '[A-Z]',当然反过来将大写变小写也是可以的

2.col 命令
col 命令可以将Tab换成对等数量的空格键，或反转这个操作。
使用方式：
col [option]
常用的选项有：
选项 说明
-x 将Tab转换为空格
-h 将空格转换为Tab（默认选项）
操作举例：
查看 /etc/protocols 中的不可见字符，可以看到很多 ^I ，这其实就是 Tab 转义成可见字符的符号
$ cat -A /etc/protocols
---
使用 col -x 将 /etc/protocols 中的 Tab 转换为空格,然后再使用 cat 查看，你发现 ^I 不见了
$ cat /etc/protocols | col -x | cat -A

3.join命令
学过数据库的用户对这个应该不会陌生，这个命令就是用于将两个文件中包含相同内容的那一行合并在一起。
使用方式：
join [option]... file1 file2
常用的选项有：
选项 说明
-t 指定分隔符，默认为空格
-i 忽略大小写的差异
-1 指明第一个文件要用哪个字段来对比，，默认对比第一个字段
-2 指明第二个文件要用哪个字段来对比，，默认对比第一个字段
操作举例：
创建两个文件
$ echo '1 hello' > file1
$ echo '1 shiyanlou' > file2
$ join file1 file2
将/etc/passwd与/etc/shadow两个文件按行合并（前面要标1,2,3 或类似的），指定以':'作为分隔符
$ sudo join -t':' /etc/passwd /etc/shadow
将/etc/passwd与/etc/group两个文件合并，指定以':'作为分隔符, 分别比对第4和第3个字段
$ sudo join -t':' -1 4 /etc/passwd -2 3 /etc/group

4.paste命令
paste这个命令与join 命令类似，它是在不对比数据的情况下，简单地将多个文件合并一起，以Tab隔开。
使用方式：
paste [option] file...
常用的选项有：
选项 说明
-d 指定合并的分隔符，默认为Tab
-s 不合并到一行，每个文件为一行
操作举例：
$ echo hello > file1
$ echo shiyanlou > file2
$ echo www.shiyanlou.com > file3
$ paste -d ':' file1 file2 file3
$ paste -s file1 file2 file3

5.cut 命令，打印每一行的某一字段
打印/etc/passwd文件中以:为分隔符的第1个字段和第6个字段分别表示用户名和其家目录：
$ cut /etc/passwd -d ':' -f 1,6
---
打印/etc/passwd文件中每一行的前N个字符：
# 前五个（包含第五个）
$ cut /etc/passwd -c -5
---
# 前五个之后的（包含第五个）
$ cut /etc/passwd -c 5-
---
# 第五个
$ cut /etc/passwd -c 5
---
# 2到5之间的（包含第五个）
$ cut /etc/passwd -c 2-5
---

6.wc 命令，简单小巧的计数工具
wc 命令用于统计并输出一个文件中行、单词和字节的数目，比如输出/etc/passwd文件的统计信息：
$ wc /etc/passwd
-l,-w,-c,-m,-L-分别只输出行数、单词数、字节数、字符数和输入文本中最长一行的字节数
再来结合管道来操作一下，下面统计 /etc 下面所有目录数：
$ ls -dl /etc/*/ | wc -l

7.sort 排序命令
功能：将输入按照一定方式排序，然后再输出,
支持的排序有按字典排序,数字排序，按月份排序，随机排序，反转排序，指定特定字段进行排序等等。
默认为字典排序：
$ cat /etc/passswd | sort
-r 逆序 -n数值排序

8.uniq 去重命令
uniq命令可以用于过滤或者输出重复行。
uniq file1 重复的行只显示一次 
uniq -c file1 重复的行只显示一次,并在开头标记重复次数 
uniq -d file1 只显示重复的行 注意，uniq的重复必须是连着的，
比如ls;ls;hh;ls则认为1,2行重复和第4行不重复。所以要先排序


9.正则表达式
（1）正则与通配符的区别
假设我们有这样一个文本文件，包含"shiyanlou"，和"shilouyan"这两个字符串，同样一个表达式：
shi*
如果这作为一个正则表达式，它将只能匹配 shi，而如果不是作为正则表达式*作为一个通配符，则将同时匹配这两个字符串。
因为在正则表达式中*表示匹配前面的子表达式（这里就是它前面一个字符）零次或多次，
比如它可以匹配"sh","shii","shish","shiishi"等等，而作为通配符表示匹配通配符后面任意多个任意字符，
所以它可以匹配"shiyanlou"，和"shilouyan"两个字符。
（2）基本语法：
一个正则表达式通常被称为一个模式（pattern），为用来描述或者匹配一系列符合某个句法规则的字符串。
选择
|竖直分隔符表示选择，例如"boy|girl"可以匹配"boy"或者"girl"
---
数量限定
数量限定除了我们举例用的*,还有+加号,?问号,如果在一个模式中不加数量限定符则表示出现一次且仅出现一次：
+表示前面的字符必须出现至少一次(1次或多次)，例如，"goo+gle",可以匹配"gooogle","goooogle"等；
?表示前面的字符最多出现一次(0次或1次)，例如，"colou?r",可以匹配"color"或者"colour";
*星号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次），例如，“0*42”可以匹配42、042、0042、00042等。
---
范围和优先级
()圆括号可以用来定义模式字符串的范围和优先级，这可以简单的理解为是否将括号内的模式串作为一个整体。
例如，"gr(a|e)y"等价于"gray|grey"，（这里体现了优先级，竖直分隔符用于选择a或者e而不是gra和ey），
"(grand)?father"匹配father和grandfather（这里体验了范围，?将圆括号内容作为一个整体匹配）。
---
语法（部分）
字符 描述
\ 将下一个字符标记为一个特殊字符、或一个原义字符。例如，“n”匹配字符“n”。“\n”匹配一个换行符。序列“\\”匹配“\”而“\(”则匹配“(”。
^ 匹配输入字符串的开始位置。
$ 匹配输入字符串的结束位置。
{n} n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。
{n,} n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。
{n,m} m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o。“o{0,1}”等价于“o?”。
请注意在逗号和两个数之间不能有空格。
* 匹配前面的子表达式零次或多次。例如，zo*能匹配“z”、“zo”以及“zoo”。*等价于{0,}。
+ 匹配前面的子表达式一次或多次。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。
? 匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”中的“do”。?等价于{0,1}。
? 当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。
非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。
例如，对于字符串“oooo”，“o+?”将匹配单个“o”，而“o+”将匹配所有“o”。 . 匹配除“\n”之外的任何单个字符。
要匹配包括“\n”在内的任何字符，请使用像“(.｜\n)”的模式。
(pattern) 匹配pattern并获取这一匹配的子字符串。该子字符串用于向后引用。要匹配圆括号字符，请使用“\(”或“\)”。
x｜y 匹配x或y。例如，“z｜food”能匹配“z”或“food”。“(z｜f)ood”则匹配“zood”或“food”。
[xyz] 字符集合（character class）。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。
其中特殊字符仅有反斜线\保持特殊含义，用于转义字符。其它特殊字符如星号、加号、各种括号等均作为普通字符。
脱字符^如果出现在首位则表示负值字符集合；如果出现在字符串中间就仅作为普通字符。
连字符 - 如果出现在字符串中间表示字符范围描述；如果如果出现在首位则仅作为普通字符。
[^xyz] 排除型（negate）字符集合。匹配未列出的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”。
[a-z] 字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。
[^a-z] 排除型的字符范围。匹配任何不在指定范围内的任意字符。
例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。
---
优先级
优先级为从上到下从左到右，依次降低：
运算符 说明
\ 转义符
(), (?:), (?=), [] 括号和中括号
*、+、?、{n}、{n,}、{n,m} 限定符
^、$、\任何元字符 定位点和序列
｜ 　选择

10.grep 命令，在文本中或 stdin 中查找匹配字符串
（1）grep命令的一般形式为：
grep [命令选项]... 用于匹配的表达式 [文件]...
我们搜索/home/shiyanlou目录下所有包含"shiyanlou"的所有文本文件，并显示出现在文本中的行号：
$ grep -rnI "shiyanlou" ~
-r 参数表示递归搜索子目录中的文件,-n表示打印匹配项行号，-I表示忽略二进制文件。
（2）模式匹配命令
grep命令用于打印输出文本中匹配的模式串，它使用正则表达式作为模式匹配的条件。
grep支持三种正则表达式引擎，分别用三个参数指定：
参数 说明
-E POSIX扩展正则表达式，ERE
-G POSIX基本正则表达式，BRE
-P Perl正则表达式，PCRE
在通过grep命令使用正则表达式之前，先介绍一下它的常用参数：
参数 说明
-b 将二进制文件作为文本来进行匹配
-c 统计以模式匹配的数目
-i 忽略大小写
-n 显示匹配文本所在行的行号
-v 反选，输出不匹配行的内容
-r 递归匹配查找
-A n n为正整数，表示after的意思，除了列出匹配行之外，还列出后面的n行
-B n n为正整数，表示before的意思，除了列出匹配行之外，还列出前面的n行
--color=auto 将输出中的匹配项设置为自动颜色显示
（3）使用正则表达式
使用基本正则表达式，BRE
位置
查找/etc/group文件中以"shiyanlou"为开头的行
$ grep 'shiyanlou' /etc/group
$ grep '^shiyanlou' /etc/group
---
数量
# 将匹配以'z'开头以'o'结尾的所有字符串
$ echo 'zero\nzo\nzoo' | grep 'z.*o'
# 将匹配以'z'开头以'o'结尾，中间包含一个任意字符的字符串
$ echo 'zero\nzo\nzoo' | grep 'z.o'
# 将匹配以'z'开头,以任意多个'o'结尾的字符串
$ echo 'zero\nzo\nzoo' | grep 'zo*'
---
选择
# grep默认是区分大小写的，这里将匹配所有的小写字母
$ echo '1234\nabcd' | grep '[a-z]'
# 将匹配所有的数字
$ echo '1234\nabcd' | grep '[0-9]'
# 将匹配所有的数字
$ echo '1234\nabcd' | grep '[[:digit:]]'
# 将匹配所有的小写字母
$ echo '1234\nabcd' | grep '[[:lower:]]'
# 将匹配所有的大写字母
$ echo '1234\nabcd' | grep '[[:upper:]]'
# 将匹配所有的字母和数字，包括0-9,a-z,A-Z
$ echo '1234\nabcd' | grep '[[:alnum:]]'
# 将匹配所有的字母
$ echo '1234\nabcd' | grep '[[:alpha:]]'
---
下面包含完整的特殊符号及说明：
特殊符号 说明
[:alnum:] 代表英文大小写字节及数字，亦即 0-9, A-Z, a-z
[:alpha:] 代表任何英文大小写字节，亦即 A-Z, a-z
[:blank:] 代表空白键与 [Tab] 按键两者
[:cntrl:] 代表键盘上面的控制按键，亦即包括 CR, LF, Tab, Del.. 等等
[:digit:] 代表数字而已，亦即 0-9
[:graph:] 除了空白字节 (空白键与 [Tab] 按键) 外的其他所有按键
[:lower:] 代表小写字节，亦即 a-z
[:print:] 代表任何可以被列印出来的字节
[:punct:] 代表标点符号 (punctuation symbol)，亦即：" ' ? ! ; : # $...
[:upper:] 代表大写字节，亦即 A-Z
[:space:] 任何会产生空白的字节，包括空白键, [Tab], CR 等等
[:xdigit:] 代表 16 进位的数字类型，因此包括： 0-9, A-F, a-f 的数字与字节
# 排除字符
$ echo 'geek|good' | grep '[^o]'
---
使用扩展正则表达式，ERE
要通过grep使用扩展正则表达式需要加上-E参数，或使用egrep。
数量
# 只匹配"zo"
$ echo 'zero\nzo\nzoo' | grep -E 'zo{1}'
# 匹配以"zo"开头的所有单词
$ echo 'zero\nzo\nzoo' | grep -E 'zo{1,}'
---
选择
# 匹配"www.shiyanlou.com"和"www.google.com"
$ echo 'www.shiyanlou.com\nwww.baidu.com\nwww.google.com' | grep -E 'www\.(shiyanlou|google)\.com'
# 或者匹配不包含"baidu"的内容
$ echo 'www.shiyanlou.com\nwww.baidu.com\nwww.google.com' | grep -Ev 'www\.baidu\.com'

11.sed 流编辑器
sed常用参数介绍
sed 命令基本格式：
sed [参数]... [执行命令] [输入文件]...
# 形如：
$ sed -i '1s/sad/happy/' test # 表示将test文件中第一行的"sad"替换为"happy"
---
参数 说明
-n 安静模式，只打印受影响的行，默认打印输入数据的全部内容
-e 用于在脚本中添加多个执行命令一次执行，在命令行中执行多个命令通常不需要加该参数
-f filename 指定执行filename文件中的命令
-r 使用扩展正则表达式，默认为标准正则表达式
-i 将直接修改输入文件内容，而不是打印到标准输出设备
---
常用动作指令：
命令 说明
s 行内替换
c 整行替换
a 插入到指定行的后面
i 插入到指定行的前面
p 打印指定行，通常与-n参数配合使用
d 删除指定行
打印指定行
---
# 打印2-5行
$ nl passwd | sed -n '2,5p'
# 打印奇数行
$ nl passwd | sed -n '1~2p'
---
行内替换
# 将输入文本中"shiyanlou" 全局替换为"hehe",并只打印替换的那一行，注意这里不能省略最后的"p"命令
$ sed -n 's/shiyanlou/hehe/gp' passwd
---
行间替换
$ nl passwd | grep "shiyanlou"
# 删除第21行
$ sed -n '21c\www.shiyanlou.com' passwd

12.awk
awk处理文本的方式，是将文本分割成一些“字段”，然后再对这些字段进行处理，
默认情况下，awk以空格作为一个字段的分割符，不过这不是固定了，你可以任意指定分隔符
awk命令基本格式
awk [-F fs] [-v var=value] [-f prog-file | 'program text'] [file...]
其中-F参数用于预先指定前面提到的字段分隔符（还有其他指定字段的方式） ，
-v用于预先为awk程序指定变量，
-f参数用于指定awk命令要执行的程序文件，或者在不加-f参数的情况下直接将程序语句放在这里，
最后为awk需要处理的文本输入，且可以同时输入多个文本文件
---
使用awk将文本内容打印到终端
# "quote>" 不用输入
$ awk '{
> print
> }' test
---
# 或者写到一行
$ awk '{print}' test
---
将test的第一行的每个字段单独显示为一行
$ awk '{
> if(NR==1){
> print $1 "\n" $2 "\n" $3
> } else {
> print}
> }' test
---
awk常用的内置变量
变量名 说明
FILENAME 当前输入文件名，若有多个文件，则只表示第一个。如果输入是来自标准输入，则为空字符串
$0 当前记录的内容
$N N表示字段号，最大值为NF变量的值
FS 字段分隔符，由正则表达式表示，默认为" "空格
RS 输入记录分隔符，默认为"\n"，即一行为一个记录
NF 当前记录字段数
NR 已经读入的记录数
FNR 当前输入文件的记录数，请注意它与NR的区别
OFS 输出字段分隔符，默认为" "空格
ORS 输出记录分隔符，默认为"\n"