环境变量
1.变量
使用declare 创建变量或直接用=创建变量并赋值
使用echo命令和$符号（$符号用于表示引用一个变量的值，初学者经常会忘记输入）读取变量。如echo $tmp
关于变量名，并不是任何形式的变量名都是可用的，变量名只能是英文字母,数字或者下划线，且不能以数字作为开头。

2.环境变量
	通常我们会涉及到的变量类型有三种：
当前 Shell 进程私有用户自定义变量，如上面我们创建的 temp 变量，只在当前 Shell 中有效。
Shell 本身内建的变量。
从自定义变量导出的环境变量。
也有三个与上述三种环境变量相关的命令，set，env，export。
命令	说明
set	显示当前 Shell 所有变量，包括其内建环境变量（与 Shell 外观等相关），用户自定义变量及导出的环境变量
env	显示与当前用户相关的环境变量，还可以让命令在指定环境中运行
export	显示从 Shell 中导出成环境变量的变量，也能通过它将自定义变量导出为环境变量
	关于环境变量，可以简单的理解成在当前进程的子进程是否有效，有效则为环境变量，否则不是
（有些人也将所有变量统称为环境变量，只是以全局环境变量和局部环境变量进行区分，我们只要理解它们的实质区别即可）。

3.永久生效
按变量的生存周期来划分，Linux变量可分为两类
（1）永久的：需要修改配置文件，变量永久生效9270
（2）临时的：使用export命令行声明即可，变量在关闭shell时失效。 这里介绍两个重要文件
/etc/bashrc和/etc/profile 它们分别存放的是 shell变量和环境变量。 还有要注意区别的是每个用户目录下的一个隐藏文件
这个.profile只对当前用户永久生效。而写在/etc/profile里面的是对所有用户永久生效，
所以如果想要添加一个永久生效的环境变量，只需要打开/etc/profile，在最后加上你想添加的环境变量就好啦。

4.命令的查找路径与顺序
	Shell 执行命令，是通过环境变量PATH来进行搜索的。这个PATH里面就保存了Shell中执行的命令的搜索路径。
添加自定义路径到“PATH”环境变量
在前面我们应该注意到PATH里面的路径是以：作为分割符，所以我们可以这样添加自定义路径：
PATH=$PATH:/home/mybin
现在你就可以在其他任意目录执行那两个命令了（注意需要去掉前面的./）
	给 PATH 环境变量追加了一个路径，它也只是在当前 Shell 有效，我一旦退出终端，再打开就会发现又失效了。
在每个用户的 home 目录中有一个 Shell 每次启动时会默认执行一个配置脚本，以初始化环境，包括添加一些用户自定义环境变量等等。
zsh 的配置文件是.zshrc，相应 Bash 的配置文件为.bashrc。它们在etc下还都有一个或多个全局的配置文件，不过我们一般只修改用户目录下的配置文件。
我们可以简单的使用下面命令直接添加内容到.zshrc中：
$ echo "PATH=$PATH:/home/shiyanlou/mybin" >> .zshrc
上述命令中>>表示将标准输出以追加的方式重定向到一个文件中，
注意前面用到的>是以覆盖的方式重定向到一个文件中，使用的时候一定要注意分辨。
在指定文件不存在的情况下都会创建新的文件。

5.修改和删除已有变量
变量修改
变量的修改有以下几种方式：
变量设置方式	说明
${变量名#匹配字串}	从头向后开始匹配，删除符合匹配字串的最短数据
${变量名##匹配字串}	从头向后开始匹配，删除符合匹配字串的最长数据
${变量名%匹配字串}	从尾向前开始匹配，删除符合匹配字串的最短数据
${变量名%%匹配字串}	从尾向前开始匹配，删除符合匹配字串的最长数据
${变量名/旧的字串/新的字串}	将符合旧字串的第一个字串替换为新的字串
${变量名//旧的字串/新的字串}	将符合旧字串的全部字串替换为新的字串
比如要修改我们前面添加到 PATH 的环境变量。为了避免操作失误导致命令找不到，我们先将 PATH 赋值给一个新的自定义变量 path：
$ path=$PATH
$ echo $path
$ path=${path%/home/shiyanlou/mybin}
# 或使用通配符,*表示任意多个任意字符
$ path=${path%*/mybin}
变量删除
可以使用unset命令删除一个环境变量：
$ unset temp

6.立即生效
我们可以使用source命令来让其立即生效，如：
$ source .zshrc
source命令还有一个别名就是.，注意与表示当前路径的那个点区分开，虽然形式一样，但作用和使用方式一样，
上面的命令如果替换成.的方式就该是
$ . ./.zshrc