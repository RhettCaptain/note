核心概念
一、依赖管理
1、依赖配置
　　依赖配置主要包含如下元素：
    <!--添加依赖配置-->
     <dependencies>
         <!--项目要使用到junit的jar包，所以在这里添加junit的jar包的依赖-->
         <dependency>
             <groupId>junit</groupId>
             <artifactId>junit</artifactId>
             <version>4.9</version>
             <scope>test</scope>
         </dependency>
         <!--项目要使用到Hello的jar包，所以在这里添加Hello的jar包的依赖-->
         <dependency>
             <groupId>me.gacl.maven</groupId>
             <artifactId>Hello</artifactId>
             <version>0.0.1-SNAPSHOT</version>
             <scope>compile</scope>
         </dependency>    
     </dependencies>
2、依赖范围
　　依赖范围scope用来控制依赖和编译，测试，运行的classpath的关系. 主要的是三种依赖关系如下：
　　　　compile： 默认编译依赖范围。对于编译，测试，运行三种classpath都有效
　　　　test：测试依赖范围。只对于测试classpath有效
　　　　provided：已提供依赖范围。对于编译，测试的classpath都有效，但对于运行无效。因为由容器已经提供，例如servlet-api
　　　　runtime:运行时提供。例如:jdbc驱动

3、传递性依赖
　　MakeFriends.jar直接依赖于HelloFriends.jar，而HelloFriends.jar又直接依赖于Hello.jar，那么MakeFriends.jar也依赖于Hello.jar，这就是传递性依赖，
只不过这种依赖是间接依赖

4、可选依赖

二、仓库管理
1、Maven仓库
　　用来统一存储所有Maven共享构建的位置就是仓库
2、Maven仓库布局
　　根据Maven坐标定义每个构建在仓库中唯一存储路径，大致为：groupId/artifactId/version/artifactId-version.packaging
3、仓库的分类
3.1、本地仓库
　　每个用户只有一个本地仓库，默认是在~/.m2/repository/，~代表的是用户目录

3.2、远程仓库
　　1、中央仓库：Maven默认的远程仓库，URL地址：http://search.maven.org/
　　2、私服：是一种特殊的远程仓库，它是架设在局域网内的仓库


三、生命周期
1、何为生命周期？
　　Maven生命周期就是为了对所有的构建过程进行抽象和统一，包括项目清理，初始化，编译，打包，测试，部署等几乎所有构建步骤

2、Maven三大生命周期
　　Maven有三套相互独立的生命周期，请注意这里说的是"三套"，而且"相互独立"，这三套生命周期分别是：
		Clean Lifecycle 在进行真正的构建之前进行一些清理工作。
		Default Lifecycle 构建的核心部分，编译，测试，打包，部署等等。
		Site Lifecycle 生成项目报告，站点，发布站点。
　　再次强调一下它们是相互独立的，你可以仅仅调用clean来清理工作目录，仅仅调用site来生成站点。当然你也可以直接运行 mvn clean install site 运行所有这三套生命周期。 
　　
（1）clean生命周期每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行mvn clean ，这个的clean是Clean生命周期的一个阶段。有Clean生命周期，也有clean阶段。Clean生命周期一共包含了三个阶段：
		pre-clean 执行一些需要在clean之前完成的工作
		clean 移除所有上一次构建生成的文件
		post-clean 执行一些需要在clean之后立刻完成的工作
　　"mvn clean" 中的clean就是上面的clean，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，"mvn clean"等同于 mvn pre-clean clean ，如果我们运行 mvn post-clean ，那么 pre-clean，clean 都会被运行。这是Maven很重要的一个规则，可以大大简化命令行的输入。 
　　
（2）Site生命周期pre-site 执行一些需要在生成站点文档之前完成的工作
site 生成项目的站点文档
post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备
site-deploy 将生成的站点文档部署到特定的服务器上
　　这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这可是Maven相当强大的功能，Manager比较喜欢，文档及统计数据自动生成，很好看。
　　
（3）Default生命周期Default生命周期是Maven生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段：
validate
generate-sources
process-sources
generate-resources
process-resources 复制并处理资源文件，至目标目录，准备打包。
compile 编译项目的源代码。
process-classes
generate-test-sources
process-test-sources
generate-test-resources
process-test-resources 复制并处理资源文件，至目标测试目录。
test-compile 编译测试源代码。
process-test-classes
test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。
prepare-package
package 接受编译好的代码，打包成可发布的格式，如 JAR 。
pre-integration-test
integration-test
post-integration-test
verify
install 将包安装至本地仓库，以让其它项目依赖。
deploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享。
　　运行任何一个阶段的时候，它前面的所有阶段都会被运行，这也就是为什么我们运行mvn install 的时候，代码会被编译，测试，打包。此外，Maven的插件机制是完全依赖Maven的生命周期的，因此理解生命周期至关重要。

四、Maven插件
Maven的核心仅仅定义了抽象的生命周期，具体的任务都是交由插件完成的。
每个插件都能实现多个功能，每个功能就是一个插件目标。
Maven的生命周期与插件目标相互绑定，以完成某个具体的构建任务，例如compile就是插件maven-compiler-plugin的一个插件目标。

五、聚合
　　如果我们想一次构建多个项目模块，那我们就需要对多个项目模块进行聚合
1、聚合配置代码
 <modules>
       <module>模块一</module>
       <module>模块二</module>
       <module>模块三</module>
 </modules>
　　例如：对项目的Hello、HelloFriend、MakeFriends这三个模块进行聚合
 <modules>
       <module>../Hello</module>  
       <module>../HelloFriend</module>        
       <module>../MakeFriends</module>
 </modules>
　　其中module的路径为相对路径。

六、继承
　　继承为了消除重复，我们把很多相同的配置提取出来，例如：grouptId，version等

1、继承配置代码
<parent>  
         <groupId>me.gacl.maven</groupId>
         <artifactId>ParentProject</artifactId>
         <version>0.0.1-SNAPSHOT</version>
         <relativePath>../ParentProject/pom.xml</relativePath>  
</parent>
2、继承代码中定义属性
　　继承代码过程中，可以定义属性，例如：
<properties>
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     <junit.version>4.9</junit.version>
     <maven.version>0.0.1-SNAPSHOT</maven.version>
</properties>
3、父模块用dependencyManagement进行管理
<dependencyManagement>
    <dependencies>
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>${junit.version}</version>
        <scope>test</scope>
    </dependency>    
    <dependency>
            <groupId>cn.itcast.maven</groupId>
            <artifactId>HelloFriend</artifactId>
            <version>${maven.version}</version>
            <type>jar</type>
            <scope>compile</scope>
       </dependency>
     </dependencies>
</dependencyManagement>