函数
一、函数基础
1.内置函数
    abs(-10)  #返回绝对值
    int('123')#转换成int型，类似的str，float，bool
    help(abs) #查看abs函数帮助
    也可以在http://docs.python.org/3/library/functions.html#abs查看文档
2.定义函数
    def 函数名(参数):
    缩进 函数体
  如：def my_abs(x):
         if x>=0:
            return x
         else:
            return -x
3.导入函数
    #从lib.py文件导入myAbs函数
    from lib import myAbs
4.空函数
    def nop():
	pass	#用pass啥也不做
5.返回多个值
    本质上是返回一个tuple，但语法上返回可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，如：
    def move(x,y):
        nx=x+1
        ny=y+1
        return nx,ny
    a,b=move(1,2)	#a=2,b=3
    r=move(1,2)		#r=(2,3)
6.默认参数
    def power(x,n=2):
    def enroll(name, gender, age=6, city='Beijing'):
    enroll('Bob', 'M', 7)    #按顺序提供默认参数
    enroll('Adam', 'M', city='Tianjin')    #当不按顺序提供部分默认参数时，需要把参数名写上
7.可变参数
    定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个*号。
    在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数。如：
    def calc(*numbers):
        sum = 0
        for n in numbers:
            sum = sum + n * n
        return sum
    >>> calc(1, 2)	#5
    >>> calc()	#0
    如果已经有一个list或者tuple，要调用一个可变参数，可以在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去
    >>> nums = [1, 2, 3]
    >>> calc(*nums)
8.关键字参数
    关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict.
    def person(name, age, **kw):	#kw是关键字参数
        print('name:', name, 'age:', age, 'other:', kw)
    >>> person('Michael', 30)	#name: Michael age: 30 other: {}
    >>> person('Bob', 35, city='Beijing')	#name: Bob age: 35 other: {'city': 'Beijing'}
    >>> person('Adam', 45, gender='M', job='Engineer')	#name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}
    >>> extra = {'city': 'Beijing', 'job': 'Engineer'}
    >>> person('Jack', 24, **extra)	#name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
    **extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict，注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra。
9.命名关键字参数
	//TO DO
10.参数组合
    在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。
    但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。

