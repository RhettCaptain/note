1.服务
	ros的节点通信有话题和服务两种，这里介绍服务
	服务和话题（消息）的一个区别在于，话题是单向的发或收，而服务请求后会立即得到回复。（当然，强行通过消息实现服务，或通过服务实现消息也是可行的）
	另一个区别在于，不同节点可以共同订阅一个话题，而一个服务只能被一个服务器节点处理。

2.创建服务
	（1)在pkg下创建srv文件夹，在srv文件夹下编写.srv文件，如SRV_ADD.srv
	srv文件分为请求和响应两部分，由'---'分隔。如
	int64 A
	int64 B
	---
	int64 Sum
	其中 A 和 B 是请求, 而Sum 是响应。
	（*）类型见topic文档对应部分。可以只有请求，或只有响应
	
	（2)在pkg下修改packages.xml
	添加<build_depend>message_generation</build_depend>		//编译需要

	（3)在pkg下修改CMakeLists.txt
	--find_package(catkin REQUIRED COMPONENTS message_generation)  //里面添加message_generation
	--add_service_files(
  				FILES
  				SRV_ADD.srv		//这里添加创建的服务
				)
	--generate_messages(	//添加（去掉注释）这部分
			 DEPENDENCIES
 			 std_msgs
			)

	（4)编译服务
		在work space下catkin_make,会在devel/include/<pkg>目录下产生消息相关的头文件，有三个（总，请求，响应），包含的时候只包含总，如SRV_ADD.h即可

3.编写服务器节点
	示例：
	#include "ros/ros.h"
	#include "pkg/SRV_ADD.h"
	bool add(pkg::SRV_ADD::Request &req,
			pkg::SRV_ADD::Response &res)
	{
		res.Sum = req.A + req.B;
		return true;	//判断服务是否响应完成
	}
	//服务函数，接收到请求后通过该函数进行响应处理
	//服务类<pkg_name>::<srv_name>包含Request(请求），Response(响应）的引用，该引用可以看作对象，直接使用成员操作。
	int main(int argc, char **argv)
	{
		ros::init(argc,argv,"add_server");
		ros::NodeHandle n;
		//为这个进程的节点创建一个句柄,可用于产生服务器类对象，客户端类对象等操作。
		ros::ServiceServer service = n.advertiseService("srv_add",add);
		//句柄通过advertiseService产生服务器对象，第一个参数为服务代号,可以看作ip，第二个参数为服务函数
		ROS_INFO("Ready to add two ints.");
  		ros::spin();
  		return 0;
	}

4.编写客户端节点
	示例：
	#include "ros/ros.h"
	#include "pkg/SRV_ADD.h"
	#include <cstdlib>
	int main(int argc, char **argv)
	{
		ros::init(argc,argv,"add_client");
		if (argc != 3)
  		{
   			ROS_INFO("usage: add_two_ints_client X Y");
    		return 1;
  		}
  		ros::NodeHandle n;
  		ros::ServiceClient client = n.serviceClient<pkg::SRV_ADD>("add_two_ints");
		//句柄通过serviceClient产生客户端类ServiceClient的对象，模板类型为服务类型（包名::服务名），参数是服务代号
		pkg::SRV_ADD srv;
		//创建服务类的对象，以便发送请求和读取响应
		srv.request.A = atoll(argv[1]);
 		srv.request.B = atoll(argv[2]);
		if (client.call(srv))
  		{
    		ROS_INFO("Sum: %ld", (long int)srv.response.Sum);
  		}
  		else
  		{
    		ROS_ERROR("Failed to call service add");
    		return 1;
  		}
  		return 0;
	}

5.编译和运行
	（1)在CMakeLists.txt中添加
	include_directories(include ${catkin_INCLUDE_DIRES})
	//包含目录，一般这句话是有的，如果没有加一下
	add_executable(node_service src/service.cpp)
	//第一个参数是节点名，即生成的可执行文件叫啥名，可以自己定。第二个是cpp地址
	target_link_libraries(node_service ${catkin_LIBRARIES})
	//链接库，区分大小写，不然会出现大量ros未定义的引用
	add_executable(node_client src/client.cpp)
	target_link_libraries(node_client ${catkin_LIBRARIES})
	
	（2)运行
	先运行roscore开启服务主机master
	通过rosrun <pkg> <node> 运行节点

6.其他
	（1)服务和消息有许多相似之处，不明白的可以参考topic中的介绍。
